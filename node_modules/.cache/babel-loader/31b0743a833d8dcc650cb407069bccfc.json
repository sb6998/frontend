{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url = require(\"url\");\n\nconst yargs = require(\"yargs\");\n\nconst qs = require(\"querystring\");\n\nconst multipart = require(\"parse-multipart\"); // Based on https://github.com/NickCarneiro/curlconverter/blob/master/util.js\n\n\nclass CURLParser {\n  constructor(cURLStr) {\n    this.cURLStr = cURLStr;\n    const yargObj = yargs.parse(this.pretreatment(cURLStr));\n    this.yargObj = yargObj;\n  }\n  /** 预处理 */\n\n\n  pretreatment(cURLStr) {\n    if (!cURLStr.startsWith('curl')) {\n      throw new Error('curl syntax error');\n    } // 删除换行\n\n\n    const newLineFound = /\\r|\\n/.exec(cURLStr);\n\n    if (newLineFound) {\n      cURLStr = cURLStr.replace(/\\\\\\r|\\\\\\n/g, '');\n    } // 改成通用写法\n\n\n    cURLStr = cURLStr.replace(/ -XPOST/, ' -X POST');\n    cURLStr = cURLStr.replace(/ -XGET/, ' -X GET');\n    cURLStr = cURLStr.replace(/ -XPUT/, ' -X PUT');\n    cURLStr = cURLStr.replace(/ -XPATCH/, ' -X PATCH');\n    cURLStr = cURLStr.replace(/ -XDELETE/, ' -X DELETE');\n    cURLStr = cURLStr.replace(/ --header/g, ' -H');\n    cURLStr = cURLStr.replace(/ --user-agent/g, ' -A');\n    cURLStr = cURLStr.replace(/ --request/g, ' -X');\n    cURLStr = cURLStr.replace(/ --(data|data-binary|data-urlencode)/g, ' -d');\n    cURLStr = cURLStr.replace(/ --form/g, ' -F');\n    cURLStr = cURLStr.trim();\n    cURLStr = cURLStr.replace(/^curl/, '');\n    return cURLStr;\n  }\n  /** 如果有误写的两个相同的，取最后一个 */\n\n\n  getFirstItem(key) {\n    const e = this.yargObj[key];\n\n    if (!Array.isArray(e)) {\n      return e;\n    }\n\n    return e[e.length - 1] || '';\n  }\n\n  getUrl() {\n    const yargObj = this.yargObj;\n    let uri = '';\n    uri = yargObj._[0];\n\n    if (yargObj['url']) {\n      uri = yargObj['url'];\n    }\n\n    if (!uri) {\n      Object.values(yargObj).forEach(e => {\n        if (typeof e !== 'string') {\n          return;\n        }\n\n        if (e.startsWith('http') || e.startsWith('www.')) {\n          uri = e;\n        }\n      });\n    }\n\n    return uri;\n  }\n\n  getQuery(uri) {\n    const obj = url.parse(uri, true);\n    return obj.query;\n  }\n\n  getHeaders() {\n    const yargObj = this.yargObj;\n    const headers = {};\n\n    if (!Reflect.has(yargObj, 'H')) {\n      return headers;\n    }\n\n    let yargHeaders = yargObj['H'];\n\n    if (!Array.isArray(yargHeaders)) {\n      yargHeaders = [yargHeaders];\n    }\n\n    yargHeaders.forEach(item => {\n      const i = item.indexOf(':');\n      const name = item.substring(0, i).trim().toLowerCase();\n      const val = item.substring(i + 1).trim();\n      headers[name] = val;\n    });\n\n    if (Reflect.has(yargObj, 'A')) {\n      headers['user-agent'] = this.getFirstItem('A');\n    }\n\n    return headers;\n  }\n\n  getMethods() {\n    const yargObj = this.yargObj;\n    let me = this.getFirstItem('X') || 'GET';\n\n    if (Reflect.has(yargObj, 'd') || Reflect.has(yargObj, 'F')) {\n      me = 'POST';\n    }\n\n    return me.toUpperCase();\n  }\n\n  getBody(headers) {\n    const contentType = headers['content-type'];\n    let type = 'text/plain';\n    let data = this.yargObj['d'];\n\n    if (contentType) {\n      if (contentType.indexOf('json') > -1) {\n        type = 'application/json';\n      }\n\n      if (contentType.indexOf('urlencoded') > -1) {\n        type = 'application/x-www-form-urlencoded';\n      }\n\n      if (this.cURLStr.indexOf(' --data-urlencoded') > -1) {\n        type = 'application/x-www-form-urlencoded';\n      }\n\n      if (Array.isArray(data) && type !== 'application/x-www-form-urlencoded') {\n        type = 'application/x-www-form-urlencoded';\n        data = data.join('&');\n      }\n\n      if (this.yargObj['F']) {\n        type = 'multipart/form-data';\n      }\n\n      if (contentType.indexOf('form-data') > -1) {\n        type = 'multipart/form-data';\n        let boundary = '';\n        const match = contentType.match('/boundary=.+/');\n\n        if (!match) {\n          type = 'text/plain';\n        } else {\n          boundary = match[0].slice(9);\n\n          try {\n            const parts = multipart.parse(data, boundary);\n            this.yargObj['F'] = parts.map(item => {\n              return `${item.name}=${item.data}`;\n            });\n          } catch (error) {\n            type = 'text/plain';\n          }\n        }\n      }\n    } else {\n      if (typeof data === 'string' && data) {\n        try {\n          JSON.parse(data);\n          type = 'application/json';\n        } catch (error) {//\n        }\n      }\n    }\n\n    let body = '';\n\n    switch (type) {\n      case 'application/json':\n        try {\n          body = JSON.parse(data);\n        } catch (error) {\n          body = data;\n        }\n\n        break;\n\n      case 'application/x-www-form-urlencoded':\n        body = qs.parse(data);\n        break;\n\n      case 'multipart/form-data':\n        // 指定 form\n        if (this.yargObj['F']) {\n          const multipartUpload = {};\n          let yargFrom = this.yargObj['F'];\n\n          if (!Array.isArray(yargFrom)) {\n            yargFrom = [yargFrom];\n          }\n\n          yargFrom.forEach(item => {\n            const arr = item.split('=');\n            multipartUpload[arr[0]] = arr[1];\n          });\n          body = multipartUpload;\n        } else {// 从 d 中解析\n        }\n\n        break;\n\n      default:\n        body = 'data';\n        break;\n    }\n\n    const requestBody = {\n      type,\n      data: body\n    };\n    return requestBody;\n  }\n\n  parse() {\n    const uri = this.getUrl();\n    const headers = this.getHeaders();\n    const ret = {\n      url: uri,\n      method: this.getMethods(),\n      headers,\n      query: this.getQuery(uri),\n      body: this.getBody(headers)\n    };\n    return ret;\n  }\n\n}\n\nexports.default = CURLParser;","map":{"version":3,"sources":["/home/saurabh/node_modules/parse-curl-js/dist/parser.js"],"names":["Object","defineProperty","exports","value","url","require","yargs","qs","multipart","CURLParser","constructor","cURLStr","yargObj","parse","pretreatment","startsWith","Error","newLineFound","exec","replace","trim","getFirstItem","key","e","Array","isArray","length","getUrl","uri","_","values","forEach","getQuery","obj","query","getHeaders","headers","Reflect","has","yargHeaders","item","i","indexOf","name","substring","toLowerCase","val","getMethods","me","toUpperCase","getBody","contentType","type","data","join","boundary","match","slice","parts","map","error","JSON","body","multipartUpload","yargFrom","arr","split","requestBody","ret","method","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url = require(\"url\");\nconst yargs = require(\"yargs\");\nconst qs = require(\"querystring\");\nconst multipart = require(\"parse-multipart\");\n// Based on https://github.com/NickCarneiro/curlconverter/blob/master/util.js\nclass CURLParser {\n    constructor(cURLStr) {\n        this.cURLStr = cURLStr;\n        const yargObj = yargs.parse(this.pretreatment(cURLStr));\n        this.yargObj = yargObj;\n    }\n    /** 预处理 */\n    pretreatment(cURLStr) {\n        if (!cURLStr.startsWith('curl')) {\n            throw new Error('curl syntax error');\n        }\n        // 删除换行\n        const newLineFound = /\\r|\\n/.exec(cURLStr);\n        if (newLineFound) {\n            cURLStr = cURLStr.replace(/\\\\\\r|\\\\\\n/g, '');\n        }\n        // 改成通用写法\n        cURLStr = cURLStr.replace(/ -XPOST/, ' -X POST');\n        cURLStr = cURLStr.replace(/ -XGET/, ' -X GET');\n        cURLStr = cURLStr.replace(/ -XPUT/, ' -X PUT');\n        cURLStr = cURLStr.replace(/ -XPATCH/, ' -X PATCH');\n        cURLStr = cURLStr.replace(/ -XDELETE/, ' -X DELETE');\n        cURLStr = cURLStr.replace(/ --header/g, ' -H');\n        cURLStr = cURLStr.replace(/ --user-agent/g, ' -A');\n        cURLStr = cURLStr.replace(/ --request/g, ' -X');\n        cURLStr = cURLStr.replace(/ --(data|data-binary|data-urlencode)/g, ' -d');\n        cURLStr = cURLStr.replace(/ --form/g, ' -F');\n        cURLStr = cURLStr.trim();\n        cURLStr = cURLStr.replace(/^curl/, '');\n        return cURLStr;\n    }\n    /** 如果有误写的两个相同的，取最后一个 */\n    getFirstItem(key) {\n        const e = this.yargObj[key];\n        if (!Array.isArray(e)) {\n            return e;\n        }\n        return e[e.length - 1] || '';\n    }\n    getUrl() {\n        const yargObj = this.yargObj;\n        let uri = '';\n        uri = yargObj._[0];\n        if (yargObj['url']) {\n            uri = yargObj['url'];\n        }\n        if (!uri) {\n            Object.values(yargObj).forEach(e => {\n                if (typeof e !== 'string') {\n                    return;\n                }\n                if (e.startsWith('http') || e.startsWith('www.')) {\n                    uri = e;\n                }\n            });\n        }\n        return uri;\n    }\n    getQuery(uri) {\n        const obj = url.parse(uri, true);\n        return obj.query;\n    }\n    getHeaders() {\n        const yargObj = this.yargObj;\n        const headers = {};\n        if (!Reflect.has(yargObj, 'H')) {\n            return headers;\n        }\n        let yargHeaders = yargObj['H'];\n        if (!Array.isArray(yargHeaders)) {\n            yargHeaders = [yargHeaders];\n        }\n        yargHeaders.forEach(item => {\n            const i = item.indexOf(':');\n            const name = item.substring(0, i).trim().toLowerCase();\n            const val = item.substring(i + 1).trim();\n            headers[name] = val;\n        });\n        if (Reflect.has(yargObj, 'A')) {\n            headers['user-agent'] = this.getFirstItem('A');\n        }\n        return headers;\n    }\n    getMethods() {\n        const yargObj = this.yargObj;\n        let me = this.getFirstItem('X') || 'GET';\n        if (Reflect.has(yargObj, 'd') || Reflect.has(yargObj, 'F')) {\n            me = 'POST';\n        }\n        return me.toUpperCase();\n    }\n    getBody(headers) {\n        const contentType = headers['content-type'];\n        let type = 'text/plain';\n        let data = this.yargObj['d'];\n        if (contentType) {\n            if (contentType.indexOf('json') > -1) {\n                type = 'application/json';\n            }\n            if (contentType.indexOf('urlencoded') > -1) {\n                type = 'application/x-www-form-urlencoded';\n            }\n            if (this.cURLStr.indexOf(' --data-urlencoded') > -1) {\n                type = 'application/x-www-form-urlencoded';\n            }\n            if (Array.isArray(data) && type !== 'application/x-www-form-urlencoded') {\n                type = 'application/x-www-form-urlencoded';\n                data = data.join('&');\n            }\n            if (this.yargObj['F']) {\n                type = 'multipart/form-data';\n            }\n            if (contentType.indexOf('form-data') > -1) {\n                type = 'multipart/form-data';\n                let boundary = '';\n                const match = contentType.match('/boundary=.+/');\n                if (!match) {\n                    type = 'text/plain';\n                }\n                else {\n                    boundary = match[0].slice(9);\n                    try {\n                        const parts = multipart.parse(data, boundary);\n                        this.yargObj['F'] = parts.map(item => {\n                            return `${item.name}=${item.data}`;\n                        });\n                    }\n                    catch (error) {\n                        type = 'text/plain';\n                    }\n                }\n            }\n        }\n        else {\n            if (typeof data === 'string' && data) {\n                try {\n                    JSON.parse(data);\n                    type = 'application/json';\n                }\n                catch (error) {\n                    //\n                }\n            }\n        }\n        let body = '';\n        switch (type) {\n            case 'application/json':\n                try {\n                    body = JSON.parse(data);\n                }\n                catch (error) {\n                    body = data;\n                }\n                break;\n            case 'application/x-www-form-urlencoded':\n                body = qs.parse(data);\n                break;\n            case 'multipart/form-data':\n                // 指定 form\n                if (this.yargObj['F']) {\n                    const multipartUpload = {};\n                    let yargFrom = this.yargObj['F'];\n                    if (!Array.isArray(yargFrom)) {\n                        yargFrom = [yargFrom];\n                    }\n                    yargFrom.forEach(item => {\n                        const arr = item.split('=');\n                        multipartUpload[arr[0]] = arr[1];\n                    });\n                    body = multipartUpload;\n                }\n                else {\n                    // 从 d 中解析\n                }\n                break;\n            default:\n                body = 'data';\n                break;\n        }\n        const requestBody = {\n            type,\n            data: body\n        };\n        return requestBody;\n    }\n    parse() {\n        const uri = this.getUrl();\n        const headers = this.getHeaders();\n        const ret = {\n            url: uri,\n            method: this.getMethods(),\n            headers,\n            query: this.getQuery(uri),\n            body: this.getBody(headers)\n        };\n        return ret;\n    }\n}\nexports.default = CURLParser;\n"]},"metadata":{},"sourceType":"script"}