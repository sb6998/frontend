{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/saurabh/Desktop/saarthi/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/saurabh/Desktop/saarthi/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url = require(\"url\");\n\nvar yargs = require(\"yargs\");\n\nvar qs = require(\"querystring\");\n\nvar multipart = require(\"parse-multipart\"); // Based on https://github.com/NickCarneiro/curlconverter/blob/master/util.js\n\n\nvar CURLParser = /*#__PURE__*/function () {\n  function CURLParser(cURLStr) {\n    _classCallCheck(this, CURLParser);\n\n    this.cURLStr = cURLStr;\n    var yargObj = yargs.parse(this.pretreatment(cURLStr));\n    this.yargObj = yargObj;\n  }\n  /** 预处理 */\n\n\n  _createClass(CURLParser, [{\n    key: \"pretreatment\",\n    value: function pretreatment(cURLStr) {\n      if (!cURLStr.startsWith('curl')) {\n        throw new Error('curl syntax error');\n      } // 删除换行\n\n\n      var newLineFound = /\\r|\\n/.exec(cURLStr);\n\n      if (newLineFound) {\n        cURLStr = cURLStr.replace(/\\\\\\r|\\\\\\n/g, '');\n      } // 改成通用写法\n\n\n      cURLStr = cURLStr.replace(/ -XPOST/, ' -X POST');\n      cURLStr = cURLStr.replace(/ -XGET/, ' -X GET');\n      cURLStr = cURLStr.replace(/ -XPUT/, ' -X PUT');\n      cURLStr = cURLStr.replace(/ -XPATCH/, ' -X PATCH');\n      cURLStr = cURLStr.replace(/ -XDELETE/, ' -X DELETE');\n      cURLStr = cURLStr.replace(/ --header/g, ' -H');\n      cURLStr = cURLStr.replace(/ --user-agent/g, ' -A');\n      cURLStr = cURLStr.replace(/ --request/g, ' -X');\n      cURLStr = cURLStr.replace(/ --(data|data-binary|data-urlencode)/g, ' -d');\n      cURLStr = cURLStr.replace(/ --form/g, ' -F');\n      cURLStr = cURLStr.trim();\n      cURLStr = cURLStr.replace(/^curl/, '');\n      return cURLStr;\n    }\n    /** 如果有误写的两个相同的，取最后一个 */\n\n  }, {\n    key: \"getFirstItem\",\n    value: function getFirstItem(key) {\n      var e = this.yargObj[key];\n\n      if (!Array.isArray(e)) {\n        return e;\n      }\n\n      return e[e.length - 1] || '';\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      var yargObj = this.yargObj;\n      var uri = '';\n      uri = yargObj._[0];\n\n      if (yargObj['url']) {\n        uri = yargObj['url'];\n      }\n\n      if (!uri) {\n        Object.values(yargObj).forEach(function (e) {\n          if (typeof e !== 'string') {\n            return;\n          }\n\n          if (e.startsWith('http') || e.startsWith('www.')) {\n            uri = e;\n          }\n        });\n      }\n\n      return uri;\n    }\n  }, {\n    key: \"getQuery\",\n    value: function getQuery(uri) {\n      var obj = url.parse(uri, true);\n      return obj.query;\n    }\n  }, {\n    key: \"getHeaders\",\n    value: function getHeaders() {\n      var yargObj = this.yargObj;\n      var headers = {};\n\n      if (!Reflect.has(yargObj, 'H')) {\n        return headers;\n      }\n\n      var yargHeaders = yargObj['H'];\n\n      if (!Array.isArray(yargHeaders)) {\n        yargHeaders = [yargHeaders];\n      }\n\n      yargHeaders.forEach(function (item) {\n        var i = item.indexOf(':');\n        var name = item.substring(0, i).trim().toLowerCase();\n        var val = item.substring(i + 1).trim();\n        headers[name] = val;\n      });\n\n      if (Reflect.has(yargObj, 'A')) {\n        headers['user-agent'] = this.getFirstItem('A');\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"getMethods\",\n    value: function getMethods() {\n      var yargObj = this.yargObj;\n      var me = this.getFirstItem('X') || 'GET';\n\n      if (Reflect.has(yargObj, 'd') || Reflect.has(yargObj, 'F')) {\n        me = 'POST';\n      }\n\n      return me.toUpperCase();\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody(headers) {\n      var contentType = headers['content-type'];\n      var type = 'text/plain';\n      var data = this.yargObj['d'];\n\n      if (contentType) {\n        if (contentType.indexOf('json') > -1) {\n          type = 'application/json';\n        }\n\n        if (contentType.indexOf('urlencoded') > -1) {\n          type = 'application/x-www-form-urlencoded';\n        }\n\n        if (this.cURLStr.indexOf(' --data-urlencoded') > -1) {\n          type = 'application/x-www-form-urlencoded';\n        }\n\n        if (Array.isArray(data) && type !== 'application/x-www-form-urlencoded') {\n          type = 'application/x-www-form-urlencoded';\n          data = data.join('&');\n        }\n\n        if (this.yargObj['F']) {\n          type = 'multipart/form-data';\n        }\n\n        if (contentType.indexOf('form-data') > -1) {\n          type = 'multipart/form-data';\n          var boundary = '';\n          var match = contentType.match('/boundary=.+/');\n\n          if (!match) {\n            type = 'text/plain';\n          } else {\n            boundary = match[0].slice(9);\n\n            try {\n              var parts = multipart.parse(data, boundary);\n              this.yargObj['F'] = parts.map(function (item) {\n                return \"\".concat(item.name, \"=\").concat(item.data);\n              });\n            } catch (error) {\n              type = 'text/plain';\n            }\n          }\n        }\n      } else {\n        if (typeof data === 'string' && data) {\n          try {\n            JSON.parse(data);\n            type = 'application/json';\n          } catch (error) {//\n          }\n        }\n      }\n\n      var body = '';\n\n      switch (type) {\n        case 'application/json':\n          try {\n            body = JSON.parse(data);\n          } catch (error) {\n            body = data;\n          }\n\n          break;\n\n        case 'application/x-www-form-urlencoded':\n          body = qs.parse(data);\n          break;\n\n        case 'multipart/form-data':\n          // 指定 form\n          if (this.yargObj['F']) {\n            var multipartUpload = {};\n            var yargFrom = this.yargObj['F'];\n\n            if (!Array.isArray(yargFrom)) {\n              yargFrom = [yargFrom];\n            }\n\n            yargFrom.forEach(function (item) {\n              var arr = item.split('=');\n              multipartUpload[arr[0]] = arr[1];\n            });\n            body = multipartUpload;\n          } else {// 从 d 中解析\n          }\n\n          break;\n\n        default:\n          body = 'data';\n          break;\n      }\n\n      var requestBody = {\n        type: type,\n        data: body\n      };\n      return requestBody;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var uri = this.getUrl();\n      var headers = this.getHeaders();\n      var ret = {\n        url: uri,\n        method: this.getMethods(),\n        headers: headers,\n        query: this.getQuery(uri),\n        body: this.getBody(headers)\n      };\n      return ret;\n    }\n  }]);\n\n  return CURLParser;\n}();\n\nexports.default = CURLParser;","map":{"version":3,"sources":["/home/saurabh/node_modules/parse-curl-js/dist/parser.js"],"names":["Object","defineProperty","exports","value","url","require","yargs","qs","multipart","CURLParser","cURLStr","yargObj","parse","pretreatment","startsWith","Error","newLineFound","exec","replace","trim","key","e","Array","isArray","length","uri","_","values","forEach","obj","query","headers","Reflect","has","yargHeaders","item","i","indexOf","name","substring","toLowerCase","val","getFirstItem","me","toUpperCase","contentType","type","data","join","boundary","match","slice","parts","map","error","JSON","body","multipartUpload","yargFrom","arr","split","requestBody","getUrl","getHeaders","ret","method","getMethods","getQuery","getBody","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url = require(\"url\");\nconst yargs = require(\"yargs\");\nconst qs = require(\"querystring\");\nconst multipart = require(\"parse-multipart\");\n// Based on https://github.com/NickCarneiro/curlconverter/blob/master/util.js\nclass CURLParser {\n    constructor(cURLStr) {\n        this.cURLStr = cURLStr;\n        const yargObj = yargs.parse(this.pretreatment(cURLStr));\n        this.yargObj = yargObj;\n    }\n    /** 预处理 */\n    pretreatment(cURLStr) {\n        if (!cURLStr.startsWith('curl')) {\n            throw new Error('curl syntax error');\n        }\n        // 删除换行\n        const newLineFound = /\\r|\\n/.exec(cURLStr);\n        if (newLineFound) {\n            cURLStr = cURLStr.replace(/\\\\\\r|\\\\\\n/g, '');\n        }\n        // 改成通用写法\n        cURLStr = cURLStr.replace(/ -XPOST/, ' -X POST');\n        cURLStr = cURLStr.replace(/ -XGET/, ' -X GET');\n        cURLStr = cURLStr.replace(/ -XPUT/, ' -X PUT');\n        cURLStr = cURLStr.replace(/ -XPATCH/, ' -X PATCH');\n        cURLStr = cURLStr.replace(/ -XDELETE/, ' -X DELETE');\n        cURLStr = cURLStr.replace(/ --header/g, ' -H');\n        cURLStr = cURLStr.replace(/ --user-agent/g, ' -A');\n        cURLStr = cURLStr.replace(/ --request/g, ' -X');\n        cURLStr = cURLStr.replace(/ --(data|data-binary|data-urlencode)/g, ' -d');\n        cURLStr = cURLStr.replace(/ --form/g, ' -F');\n        cURLStr = cURLStr.trim();\n        cURLStr = cURLStr.replace(/^curl/, '');\n        return cURLStr;\n    }\n    /** 如果有误写的两个相同的，取最后一个 */\n    getFirstItem(key) {\n        const e = this.yargObj[key];\n        if (!Array.isArray(e)) {\n            return e;\n        }\n        return e[e.length - 1] || '';\n    }\n    getUrl() {\n        const yargObj = this.yargObj;\n        let uri = '';\n        uri = yargObj._[0];\n        if (yargObj['url']) {\n            uri = yargObj['url'];\n        }\n        if (!uri) {\n            Object.values(yargObj).forEach(e => {\n                if (typeof e !== 'string') {\n                    return;\n                }\n                if (e.startsWith('http') || e.startsWith('www.')) {\n                    uri = e;\n                }\n            });\n        }\n        return uri;\n    }\n    getQuery(uri) {\n        const obj = url.parse(uri, true);\n        return obj.query;\n    }\n    getHeaders() {\n        const yargObj = this.yargObj;\n        const headers = {};\n        if (!Reflect.has(yargObj, 'H')) {\n            return headers;\n        }\n        let yargHeaders = yargObj['H'];\n        if (!Array.isArray(yargHeaders)) {\n            yargHeaders = [yargHeaders];\n        }\n        yargHeaders.forEach(item => {\n            const i = item.indexOf(':');\n            const name = item.substring(0, i).trim().toLowerCase();\n            const val = item.substring(i + 1).trim();\n            headers[name] = val;\n        });\n        if (Reflect.has(yargObj, 'A')) {\n            headers['user-agent'] = this.getFirstItem('A');\n        }\n        return headers;\n    }\n    getMethods() {\n        const yargObj = this.yargObj;\n        let me = this.getFirstItem('X') || 'GET';\n        if (Reflect.has(yargObj, 'd') || Reflect.has(yargObj, 'F')) {\n            me = 'POST';\n        }\n        return me.toUpperCase();\n    }\n    getBody(headers) {\n        const contentType = headers['content-type'];\n        let type = 'text/plain';\n        let data = this.yargObj['d'];\n        if (contentType) {\n            if (contentType.indexOf('json') > -1) {\n                type = 'application/json';\n            }\n            if (contentType.indexOf('urlencoded') > -1) {\n                type = 'application/x-www-form-urlencoded';\n            }\n            if (this.cURLStr.indexOf(' --data-urlencoded') > -1) {\n                type = 'application/x-www-form-urlencoded';\n            }\n            if (Array.isArray(data) && type !== 'application/x-www-form-urlencoded') {\n                type = 'application/x-www-form-urlencoded';\n                data = data.join('&');\n            }\n            if (this.yargObj['F']) {\n                type = 'multipart/form-data';\n            }\n            if (contentType.indexOf('form-data') > -1) {\n                type = 'multipart/form-data';\n                let boundary = '';\n                const match = contentType.match('/boundary=.+/');\n                if (!match) {\n                    type = 'text/plain';\n                }\n                else {\n                    boundary = match[0].slice(9);\n                    try {\n                        const parts = multipart.parse(data, boundary);\n                        this.yargObj['F'] = parts.map(item => {\n                            return `${item.name}=${item.data}`;\n                        });\n                    }\n                    catch (error) {\n                        type = 'text/plain';\n                    }\n                }\n            }\n        }\n        else {\n            if (typeof data === 'string' && data) {\n                try {\n                    JSON.parse(data);\n                    type = 'application/json';\n                }\n                catch (error) {\n                    //\n                }\n            }\n        }\n        let body = '';\n        switch (type) {\n            case 'application/json':\n                try {\n                    body = JSON.parse(data);\n                }\n                catch (error) {\n                    body = data;\n                }\n                break;\n            case 'application/x-www-form-urlencoded':\n                body = qs.parse(data);\n                break;\n            case 'multipart/form-data':\n                // 指定 form\n                if (this.yargObj['F']) {\n                    const multipartUpload = {};\n                    let yargFrom = this.yargObj['F'];\n                    if (!Array.isArray(yargFrom)) {\n                        yargFrom = [yargFrom];\n                    }\n                    yargFrom.forEach(item => {\n                        const arr = item.split('=');\n                        multipartUpload[arr[0]] = arr[1];\n                    });\n                    body = multipartUpload;\n                }\n                else {\n                    // 从 d 中解析\n                }\n                break;\n            default:\n                body = 'data';\n                break;\n        }\n        const requestBody = {\n            type,\n            data: body\n        };\n        return requestBody;\n    }\n    parse() {\n        const uri = this.getUrl();\n        const headers = this.getHeaders();\n        const ret = {\n            url: uri,\n            method: this.getMethods(),\n            headers,\n            query: this.getQuery(uri),\n            body: this.getBody(headers)\n        };\n        return ret;\n    }\n}\nexports.default = CURLParser;\n"]},"metadata":{},"sourceType":"script"}