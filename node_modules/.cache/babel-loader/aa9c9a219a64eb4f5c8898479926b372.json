{"ast":null,"code":"/**\n \tMultipart Parser (Finite State Machine)\n\n\tusage:\n\n\tvar multipart = require('./multipart.js');\n\tvar body = multipart.DemoData(); \t\t\t\t\t\t\t   // raw body\n\tvar body = new Buffer(event['body-json'].toString(),'base64'); // AWS case\n\t\n\tvar boundary = multipart.getBoundary(event.params.header['content-type']);\n\tvar parts = multipart.Parse(body,boundary);\n\t\n\t// each part is:\n\t// { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n\n\tauthor:  Cristian Salazar (christiansalazarh@gmail.com) www.chileshift.cl\n\t\t\t Twitter: @AmazonAwsChile\n */\nexports.Parse = function (multipartBodyBuffer, boundary) {\n  var process = function (part) {\n    // will transform this object:\n    // { header: 'Content-Disposition: form-data; name=\"uploads[]\"; filename=\"A.txt\"',\n    //\t info: 'Content-Type: text/plain',\n    //\t part: 'AAAABBBB' }\n    // into this one:\n    // { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n    var obj = function (str) {\n      var k = str.split('=');\n      var a = k[0].trim();\n      var b = JSON.parse(k[1].trim());\n      var o = {};\n      Object.defineProperty(o, a, {\n        value: b,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      });\n      return o;\n    };\n\n    var header = part.header.split(';');\n    var file = obj(header[2]);\n    var contentType = part.info.split(':')[1].trim();\n    Object.defineProperty(file, 'type', {\n      value: contentType,\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(file, 'data', {\n      value: new Buffer(part.part),\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n    return file;\n  };\n\n  var prev = null;\n  var lastline = '';\n  var header = '';\n  var info = '';\n  var state = 0;\n  var buffer = [];\n  var allParts = [];\n\n  for (i = 0; i < multipartBodyBuffer.length; i++) {\n    var oneByte = multipartBodyBuffer[i];\n    var prevByte = i > 0 ? multipartBodyBuffer[i - 1] : null;\n    var newLineDetected = oneByte == 0x0a && prevByte == 0x0d ? true : false;\n    var newLineChar = oneByte == 0x0a || oneByte == 0x0d ? true : false;\n    if (!newLineChar) lastline += String.fromCharCode(oneByte);\n\n    if (0 == state && newLineDetected) {\n      if (\"--\" + boundary == lastline) {\n        state = 1;\n      }\n\n      lastline = '';\n    } else if (1 == state && newLineDetected) {\n      header = lastline;\n      state = 2;\n      lastline = '';\n    } else if (2 == state && newLineDetected) {\n      info = lastline;\n      state = 3;\n      lastline = '';\n    } else if (3 == state && newLineDetected) {\n      state = 4;\n      buffer = [];\n      lastline = '';\n    } else if (4 == state) {\n      if (lastline.length > boundary.length + 4) lastline = ''; // mem save\n\n      if (\"--\" + boundary == lastline) {\n        var j = buffer.length - lastline.length;\n        var part = buffer.slice(0, j - 1);\n        var p = {\n          header: header,\n          info: info,\n          part: part\n        };\n        allParts.push(process(p));\n        buffer = [];\n        lastline = '';\n        state = 5;\n        header = '';\n        info = '';\n      } else {\n        buffer.push(oneByte);\n      }\n\n      if (newLineDetected) lastline = '';\n    } else if (5 == state) {\n      if (newLineDetected) state = 1;\n    }\n  }\n\n  return allParts;\n}; //  read the boundary from the content-type header sent by the http client\n//  this value may be similar to:\n//  'multipart/form-data; boundary=----WebKitFormBoundaryvm5A9tzU1ONaGP5B',\n\n\nexports.getBoundary = function (header) {\n  var items = header.split(';');\n  if (items) for (i = 0; i < items.length; i++) {\n    var item = new String(items[i]).trim();\n\n    if (item.indexOf('boundary') >= 0) {\n      var k = item.split('=');\n      return new String(k[1]).trim();\n    }\n  }\n  return \"\";\n};\n\nexports.DemoData = function () {\n  body = \"trash1\\r\\n\";\n  body += \"------WebKitFormBoundaryvef1fLxmoUdYZWXp\\r\\n\";\n  body += \"Content-Disposition: form-data; name=\\\"uploads[]\\\"; filename=\\\"A.txt\\\"\\r\\n\";\n  body += \"Content-Type: text/plain\\r\\n\", body += \"\\r\\n\\r\\n\";\n  body += \"@11X\";\n  body += \"111Y\\r\\n\";\n  body += \"111Z\\rCCCC\\nCCCC\\r\\nCCCCC@\\r\\n\\r\\n\";\n  body += \"------WebKitFormBoundaryvef1fLxmoUdYZWXp\\r\\n\";\n  body += \"Content-Disposition: form-data; name=\\\"uploads[]\\\"; filename=\\\"B.txt\\\"\\r\\n\";\n  body += \"Content-Type: text/plain\\r\\n\", body += \"\\r\\n\\r\\n\";\n  body += \"@22X\";\n  body += \"222Y\\r\\n\";\n  body += \"222Z\\r222W\\n2220\\r\\n666@\\r\\n\";\n  body += \"------WebKitFormBoundaryvef1fLxmoUdYZWXp--\\r\\n\";\n  return new Buffer(body, 'utf-8'); // returns a Buffered payload, so the it will be treated as a binary content.\n};","map":{"version":3,"sources":["/home/saurabh/node_modules/parse-multipart/multipart.js"],"names":["exports","Parse","multipartBodyBuffer","boundary","process","part","obj","str","k","split","a","trim","b","JSON","parse","o","Object","defineProperty","value","writable","enumerable","configurable","header","file","contentType","info","Buffer","prev","lastline","state","buffer","allParts","i","length","oneByte","prevByte","newLineDetected","newLineChar","String","fromCharCode","j","slice","p","push","getBoundary","items","item","indexOf","DemoData","body"],"mappings":"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","sourcesContent":["/**\n \tMultipart Parser (Finite State Machine)\n\n\tusage:\n\n\tvar multipart = require('./multipart.js');\n\tvar body = multipart.DemoData(); \t\t\t\t\t\t\t   // raw body\n\tvar body = new Buffer(event['body-json'].toString(),'base64'); // AWS case\n\t\n\tvar boundary = multipart.getBoundary(event.params.header['content-type']);\n\tvar parts = multipart.Parse(body,boundary);\n\t\n\t// each part is:\n\t// { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n\n\tauthor:  Cristian Salazar (christiansalazarh@gmail.com) www.chileshift.cl\n\t\t\t Twitter: @AmazonAwsChile\n */\nexports.Parse = function(multipartBodyBuffer,boundary){\n\tvar process = function(part){\n\t\t// will transform this object:\n\t\t// { header: 'Content-Disposition: form-data; name=\"uploads[]\"; filename=\"A.txt\"',\n\t\t//\t info: 'Content-Type: text/plain',\n\t\t//\t part: 'AAAABBBB' }\n\t\t// into this one:\n\t\t// { filename: 'A.txt', type: 'text/plain', data: <Buffer 41 41 41 41 42 42 42 42> }\n\t\tvar obj = function(str){\n\t\t\tvar k = str.split('=');\n\t\t\tvar a = k[0].trim();\n\t\t\tvar b = JSON.parse(k[1].trim());\n\t\t\tvar o = {};\n\t\t\tObject.defineProperty( o , a , \n\t\t\t{ value: b, writable: true, enumerable: true, configurable: true })\n\t\t\treturn o;\n\t\t}\n\t\tvar header = part.header.split(';');\t\t\n\t\tvar file = obj(header[2]);\n\t\tvar contentType = part.info.split(':')[1].trim();\t\t\n\t\tObject.defineProperty( file , 'type' , \n\t\t\t{ value: contentType, writable: true, enumerable: true, configurable: true })\n\t\tObject.defineProperty( file , 'data' , \n\t\t\t{ value: new Buffer(part.part), writable: true, enumerable: true, configurable: true })\n\t\treturn file;\n\t}\n\tvar prev = null;\n\tvar lastline='';\n\tvar header = '';\n\tvar info = ''; var state=0; var buffer=[];\n\tvar allParts = [];\n\n\tfor(i=0;i<multipartBodyBuffer.length;i++){\n\t\tvar oneByte = multipartBodyBuffer[i];\n\t\tvar prevByte = i > 0 ? multipartBodyBuffer[i-1] : null;\n\t\tvar newLineDetected = ((oneByte == 0x0a) && (prevByte == 0x0d)) ? true : false;\n\t\tvar newLineChar = ((oneByte == 0x0a) || (oneByte == 0x0d)) ? true : false;\n\n\t\tif(!newLineChar)\n\t\t\tlastline += String.fromCharCode(oneByte);\n\n\t\tif((0 == state) && newLineDetected){\n\t\t\tif((\"--\"+boundary) == lastline){\n\t\t\t\tstate=1;\n\t\t\t}\n\t\t\tlastline='';\n\t\t}else\n\t\tif((1 == state) && newLineDetected){\n\t\t\theader = lastline;\n\t\t\tstate=2;\n\t\t\tlastline='';\n\t\t}else\n\t\tif((2 == state) && newLineDetected){\n\t\t\tinfo = lastline;\n\t\t\tstate=3;\n\t\t\tlastline='';\n\t\t}else\n\t\tif((3 == state) && newLineDetected){\n\t\t\tstate=4;\n\t\t\tbuffer=[];\n\t\t\tlastline='';\n\t\t}else\n\t\tif(4 == state){\n\t\t\tif(lastline.length > (boundary.length+4)) lastline=''; // mem save\n\t\t\tif((((\"--\"+boundary) == lastline))){\n\t\t\t\tvar j = buffer.length - lastline.length;\n\t\t\t\tvar part = buffer.slice(0,j-1);\n\t\t\t\tvar p = { header : header , info : info , part : part  };\n\t\t\t\tallParts.push(process(p));\n\t\t\t\tbuffer = []; lastline=''; state=5; header=''; info='';\n\t\t\t}else{\n\t\t\t\tbuffer.push(oneByte);\n\t\t\t}\n\t\t\tif(newLineDetected) lastline='';\n\t\t}else\n\t\tif(5==state){\n\t\t\tif(newLineDetected)\n\t\t\t\tstate=1;\n\t\t}\n\t}\n\treturn allParts;\n};\n\n//  read the boundary from the content-type header sent by the http client\n//  this value may be similar to:\n//  'multipart/form-data; boundary=----WebKitFormBoundaryvm5A9tzU1ONaGP5B',\nexports.getBoundary = function(header){\n\tvar items = header.split(';');\n\tif(items)\n\t\tfor(i=0;i<items.length;i++){\n\t\t\tvar item = (new String(items[i])).trim();\n\t\t\tif(item.indexOf('boundary') >= 0){\n\t\t\t\tvar k = item.split('=');\n\t\t\t\treturn (new String(k[1])).trim();\n\t\t\t}\n\t\t}\n\treturn \"\";\n}\n\nexports.DemoData = function(){\n\tbody = \"trash1\\r\\n\"\n\tbody += \"------WebKitFormBoundaryvef1fLxmoUdYZWXp\\r\\n\";\n\tbody += \"Content-Disposition: form-data; name=\\\"uploads[]\\\"; filename=\\\"A.txt\\\"\\r\\n\";\n\tbody += \"Content-Type: text/plain\\r\\n\",\n\tbody += \"\\r\\n\\r\\n\";\n\tbody += \"@11X\";\n\tbody += \"111Y\\r\\n\";\n\tbody += \"111Z\\rCCCC\\nCCCC\\r\\nCCCCC@\\r\\n\\r\\n\";\n\tbody += \"------WebKitFormBoundaryvef1fLxmoUdYZWXp\\r\\n\";\n\tbody += \"Content-Disposition: form-data; name=\\\"uploads[]\\\"; filename=\\\"B.txt\\\"\\r\\n\";\n\tbody += \"Content-Type: text/plain\\r\\n\",\n\tbody += \"\\r\\n\\r\\n\";\n\tbody += \"@22X\";\n\tbody += \"222Y\\r\\n\";\n\tbody += \"222Z\\r222W\\n2220\\r\\n666@\\r\\n\";\n\tbody += \"------WebKitFormBoundaryvef1fLxmoUdYZWXp--\\r\\n\";\n\treturn (new Buffer(body,'utf-8')); \n\t// returns a Buffered payload, so the it will be treated as a binary content.\n};\n\n"]},"metadata":{},"sourceType":"script"}