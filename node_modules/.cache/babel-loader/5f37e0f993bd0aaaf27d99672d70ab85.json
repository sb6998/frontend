{"ast":null,"code":"const util = require('../util');\n\nconst yaml = require('yamljs');\n\nconst jsesc = require('jsesc');\n\nconst querystring = require('query-string');\n\nfunction getDataString(request) {\n  let mimeType = 'application/json';\n\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString();\n    mimeType = 'text/plain';\n  }\n\n  if (request.data.indexOf(\"'\") > -1) {\n    request.data = jsesc(request.data);\n  }\n\n  const parsedQueryString = querystring.parse(request.data, {\n    sort: false\n  });\n  const keyCount = Object.keys(parsedQueryString).length;\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]];\n  const singularData = request.isDataBinary || singleKeyOnly;\n\n  if (singularData) {\n    return {\n      mimeType: mimeType,\n      text: JSON.parse(request.data)\n    };\n  } else {\n    for (const paramName in request.headers) {\n      if (paramName === 'Content-Type') {\n        mimeType = request.headers[paramName];\n      }\n    }\n\n    return {\n      mimeType: mimeType,\n      text: request.data\n    };\n  }\n}\n\nfunction getQueryList(request) {\n  const queryList = [];\n\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName];\n    queryList.push({\n      name: paramName,\n      value: rawValue\n    });\n  }\n\n  return queryList;\n}\n\nconst toStrest = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  const response = {\n    version: 2\n  };\n\n  if (request.insecure) {\n    response.allowInsecure = true;\n  }\n\n  if (!request.urlWithoutQuery.match(/https?:/)) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery;\n  }\n\n  response.requests = {\n    curl_converter: {\n      request: {\n        url: request.urlWithoutQuery.toString(),\n        method: request.method.toUpperCase()\n      }\n    }\n  };\n\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    response.requests.curl_converter.request.postData = getDataString(request);\n  }\n\n  if (request.headers) {\n    response.requests.curl_converter.request.headers = [];\n\n    for (const prop in request.headers) {\n      response.requests.curl_converter.request.headers.push({\n        name: prop,\n        value: request.headers[prop]\n      });\n    }\n\n    if (request.cookieString) {\n      response.requests.curl_converter.request.headers.push({\n        name: 'Cookie',\n        value: request.cookieString\n      });\n    }\n  }\n\n  if (request.auth) {\n    response.requests.curl_converter.auth = {\n      basic: {}\n    };\n\n    if (request.auth.split(':')[0]) {\n      response.requests.curl_converter.auth.basic.username = request.auth.split(':')[0];\n    }\n\n    response.requests.curl_converter.auth.basic.password = request.auth.split(':')[1];\n  }\n\n  let queryList;\n\n  if (request.query) {\n    queryList = getQueryList(request);\n    response.requests.curl_converter.request.queryString = queryList;\n  }\n\n  const yamlString = yaml.stringify(response, 100, 2);\n  return yamlString;\n};\n\nmodule.exports = toStrest;","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/curlconverter/generators/strest.js"],"names":["util","require","yaml","jsesc","querystring","getDataString","request","mimeType","data","toString","indexOf","parsedQueryString","parse","sort","keyCount","Object","keys","length","singleKeyOnly","singularData","isDataBinary","text","JSON","paramName","headers","getQueryList","queryList","query","rawValue","push","name","value","toStrest","curlCommand","parseCurlCommand","response","version","insecure","allowInsecure","urlWithoutQuery","match","requests","curl_converter","url","method","toUpperCase","postData","prop","cookieString","auth","basic","split","username","password","queryString","yamlString","stringify","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst yaml = require('yamljs')\nconst jsesc = require('jsesc')\nconst querystring = require('query-string')\n\nfunction getDataString (request) {\n  let mimeType = 'application/json'\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString()\n    mimeType = 'text/plain'\n  }\n  if (request.data.indexOf(\"'\") > -1) {\n    request.data = jsesc(request.data)\n  }\n  const parsedQueryString = querystring.parse(request.data, { sort: false })\n  const keyCount = Object.keys(parsedQueryString).length\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]\n  const singularData = request.isDataBinary || singleKeyOnly\n  if (singularData) {\n    return {\n      mimeType: mimeType,\n      text: JSON.parse(request.data)\n    }\n  } else {\n    for (const paramName in request.headers) {\n      if (paramName === 'Content-Type') {\n        mimeType = request.headers[paramName]\n      }\n    }\n    return {\n      mimeType: mimeType,\n      text: request.data\n    }\n  }\n}\n\nfunction getQueryList (request) {\n  const queryList = []\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName]\n    queryList.push({ name: paramName, value: rawValue })\n  }\n  return queryList\n}\n\nconst toStrest = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n  const response = { version: 2 }\n  if (request.insecure) {\n    response.allowInsecure = true\n  }\n  if (!request.urlWithoutQuery.match(/https?:/)) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery\n  }\n  response.requests = {\n    curl_converter: {\n      request: {\n        url: request.urlWithoutQuery.toString(),\n        method: request.method.toUpperCase()\n      }\n    }\n  }\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    response.requests.curl_converter.request.postData = getDataString(request)\n  }\n\n  if (request.headers) {\n    response.requests.curl_converter.request.headers = []\n    for (const prop in request.headers) {\n      response.requests.curl_converter.request.headers.push({\n        name: prop,\n        value: request.headers[prop]\n      })\n    }\n    if (request.cookieString) {\n      response.requests.curl_converter.request.headers.push({\n        name: 'Cookie',\n        value: request.cookieString\n      })\n    }\n  }\n  if (request.auth) {\n    response.requests.curl_converter.auth = {\n      basic: {}\n    }\n    if (request.auth.split(':')[0]) {\n      response.requests.curl_converter.auth.basic.username = request.auth.split(':')[0]\n    }\n    response.requests.curl_converter.auth.basic.password = request.auth.split(':')[1]\n  }\n\n  let queryList\n  if (request.query) {\n    queryList = getQueryList(request)\n    response.requests.curl_converter.request.queryString = queryList\n  }\n\n  const yamlString = yaml.stringify(response, 100, 2)\n  return yamlString\n}\n\nmodule.exports = toStrest\n"]},"metadata":{},"sourceType":"script"}