{"ast":null,"code":"const util = require('../util');\n\nconst jsesc = require('jsesc');\n\nconst querystring = require('query-string');\n\nrequire('string.prototype.startswith');\n\nfunction reprWithVariable(value, hasEnvironmentVariable) {\n  if (!value) {\n    return \"''\";\n  }\n\n  if (!hasEnvironmentVariable) {\n    return \"'\" + jsesc(value, {\n      quotes: 'single'\n    }) + \"'\";\n  }\n\n  return 'f\"' + jsesc(value, {\n    quotes: 'double'\n  }) + '\"';\n}\n\nfunction repr(value) {\n  // In context of url parameters, don't accept nulls and such.\n  return reprWithVariable(value, false);\n}\n\nfunction getQueryDict(request) {\n  let queryDict = 'params = (\\n';\n\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName];\n    let paramValue;\n\n    if (Array.isArray(rawValue)) {\n      paramValue = '[' + rawValue.map(repr).join(', ') + ']';\n    } else {\n      paramValue = repr(rawValue);\n    }\n\n    queryDict += '    (' + repr(paramName) + ', ' + paramValue + '),\\n';\n  }\n\n  queryDict += ')\\n';\n  return queryDict;\n}\n\nfunction getDataString(request) {\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString();\n  }\n\n  if (!request.isDataRaw && request.data.startsWith('@')) {\n    const filePath = request.data.slice(1);\n\n    if (request.isDataBinary) {\n      return 'data = open(\\'' + filePath + '\\', \\'rb\\').read()';\n    } else {\n      return 'data = open(\\'' + filePath + '\\')';\n    }\n  }\n\n  const parsedQueryString = querystring.parse(request.data, {\n    sort: false\n  });\n  const keyCount = Object.keys(parsedQueryString).length;\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]];\n  const singularData = request.isDataBinary || singleKeyOnly;\n\n  if (singularData) {\n    return 'data = ' + repr(request.data) + '\\n';\n  } else {\n    return getMultipleDataString(request, parsedQueryString);\n  }\n}\n\nfunction getMultipleDataString(request, parsedQueryString) {\n  let repeatedKey = false;\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n\n    if (Array.isArray(value)) {\n      repeatedKey = true;\n    }\n  }\n\n  let dataString;\n\n  if (repeatedKey) {\n    dataString = 'data = [\\n';\n\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key];\n\n      if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) {\n          dataString += '  (' + repr(key) + ', ' + repr(value[i]) + '),\\n';\n        }\n      } else {\n        dataString += '  (' + repr(key) + ', ' + repr(value) + '),\\n';\n      }\n    }\n\n    dataString += ']\\n';\n  } else {\n    dataString = 'data = {\\n';\n    const elementCount = Object.keys(parsedQueryString).length;\n    let i = 0;\n\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key];\n      dataString += '  ' + repr(key) + ': ' + repr(value);\n\n      if (i === elementCount - 1) {\n        dataString += '\\n';\n      } else {\n        dataString += ',\\n';\n      }\n\n      ++i;\n    }\n\n    dataString += '}\\n';\n  }\n\n  return dataString;\n}\n\nfunction getFilesString(request) {\n  // http://docs.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file\n  let filesString = 'files = {\\n';\n\n  for (const multipartKey in request.multipartUploads) {\n    const multipartValue = request.multipartUploads[multipartKey];\n\n    if (multipartValue.startsWith('@')) {\n      const fileName = multipartValue.slice(1);\n      filesString += '    ' + repr(multipartKey) + ': (' + repr(fileName) + ', open(' + repr(fileName) + \", 'rb')),\\n\";\n    } else {\n      filesString += '    ' + repr(multipartKey) + ': (None, ' + repr(multipartValue) + '),\\n';\n    }\n  }\n\n  filesString += '}\\n';\n  return filesString;\n} // convertVarToStringFormat will convert if inputString to f\"...\" format\n// if inputString has possible variable as its substring\n\n\nfunction detectEnvVar(inputString) {\n  // Using state machine to detect environment variable\n  // Each character is an edge, state machine:\n  // IN_ENV_VAR: means that currently we are iterating inside a possible environment variable\n  // IN_STRING: means that currently we are iterating inside a normal string\n  // For example:\n  // \"Hi my name is $USER_NAME !\"\n  // '$' --> will move state from IN_STRING to IN_ENV_VAR\n  // ' ' --> will move state to IN_STRING, regardless the previous state\n  const IN_ENV_VAR = 0;\n  const IN_STRING = 1; // We only care for the unique element\n\n  const detectedVariables = new Set();\n  let currState = IN_STRING;\n  let envVarStartIndex = -1;\n  const whiteSpaceSet = new Set();\n  whiteSpaceSet.add(' ');\n  whiteSpaceSet.add('\\n');\n  whiteSpaceSet.add('\\t');\n  const modifiedString = [];\n\n  for (const idx in inputString) {\n    const currIdx = +idx;\n    const currChar = inputString[currIdx];\n\n    if (currState === IN_ENV_VAR && whiteSpaceSet.has(currChar)) {\n      const newVariable = inputString.substring(envVarStartIndex, currIdx);\n\n      if (newVariable !== '') {\n        detectedVariables.add(newVariable); // Change $ -> {\n        // Add } after the last variable name\n\n        modifiedString.push('{' + newVariable + '}' + currChar);\n      } else {\n        modifiedString.push('$' + currChar);\n      }\n\n      currState = IN_STRING;\n      envVarStartIndex = -1;\n      continue;\n    }\n\n    if (currState === IN_ENV_VAR) {\n      // Skip until we actually have the new variable\n      continue;\n    } // currState === IN_STRING\n\n\n    if (currChar === '$') {\n      currState = IN_ENV_VAR;\n      envVarStartIndex = currIdx + 1;\n    } else {\n      modifiedString.push(currChar);\n    }\n  }\n\n  if (currState === IN_ENV_VAR) {\n    const newVariable = inputString.substring(envVarStartIndex, inputString.length);\n\n    if (newVariable !== '') {\n      detectedVariables.add(newVariable);\n      modifiedString.push('{' + newVariable + '}');\n    } else {\n      modifiedString.push('$');\n    }\n  }\n\n  return [detectedVariables, modifiedString.join('')];\n}\n\nconst toPython = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand); // Currently, only assuming that the env-var only used in\n  // the value part of cookies, params, or body\n\n  const osVariables = new Set();\n  let cookieDict;\n\n  if (request.cookies) {\n    cookieDict = 'cookies = {\\n';\n\n    for (const cookieName in request.cookies) {\n      const [detectedVars, modifiedString] = detectEnvVar(request.cookies[cookieName]);\n      const hasEnvironmentVariable = detectedVars.size > 0;\n\n      for (const newVar of detectedVars) {\n        osVariables.add(newVar);\n      }\n\n      cookieDict += '    ' + repr(cookieName) + ': ' + reprWithVariable(modifiedString, hasEnvironmentVariable) + ',\\n';\n    }\n\n    cookieDict += '}\\n';\n  }\n\n  let headerDict;\n\n  if (request.headers) {\n    headerDict = 'headers = {\\n';\n\n    for (const headerName in request.headers) {\n      const [detectedVars, modifiedString] = detectEnvVar(request.headers[headerName]);\n      const hasVariable = detectedVars.size > 0;\n\n      for (const newVar of detectedVars) {\n        osVariables.add(newVar);\n      }\n\n      headerDict += '    ' + repr(headerName) + ': ' + reprWithVariable(modifiedString, hasVariable) + ',\\n';\n    }\n\n    headerDict += '}\\n';\n  }\n\n  let queryDict;\n\n  if (request.query) {\n    queryDict = getQueryDict(request);\n  }\n\n  let dataString;\n  let filesString;\n\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    dataString = getDataString(request);\n  } else if (request.multipartUploads) {\n    filesString = getFilesString(request);\n  } // curl automatically prepends 'http' if the scheme is missing, but python fails and returns an error\n  // we tack it on here to mimic curl\n\n\n  if (!request.url.match(/https?:/)) {\n    request.url = 'http://' + request.url;\n  }\n\n  if (!request.urlWithoutQuery.match(/https?:/)) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery;\n  }\n\n  let requestLineWithUrlParams = 'response = requests.' + request.method + '(\\'' + request.urlWithoutQuery + '\\'';\n  let requestLineWithOriginalUrl = 'response = requests.' + request.method + '(\\'' + request.url + '\\'';\n  let requestLineBody = '';\n\n  if (request.headers) {\n    requestLineBody += ', headers=headers';\n  }\n\n  if (request.query) {\n    requestLineBody += ', params=params';\n  }\n\n  if (request.cookies) {\n    requestLineBody += ', cookies=cookies';\n  }\n\n  if (typeof request.data === 'string') {\n    requestLineBody += ', data=data';\n  } else if (request.multipartUploads) {\n    requestLineBody += ', files=files';\n  }\n\n  if (request.insecure) {\n    requestLineBody += ', verify=False';\n  }\n\n  if (request.auth) {\n    const splitAuth = request.auth.split(':');\n    const user = splitAuth[0] || '';\n    const password = splitAuth[1] || '';\n    requestLineBody += ', auth=(' + repr(user) + ', ' + repr(password) + ')';\n  }\n\n  requestLineBody += ')';\n  requestLineWithOriginalUrl += requestLineBody.replace(', params=params', '');\n  requestLineWithUrlParams += requestLineBody;\n  let pythonCode = ''; // Sort import by name\n\n  if (osVariables.size > 0) {\n    pythonCode += 'import os\\n';\n  }\n\n  pythonCode += 'import requests\\n\\n';\n\n  if (osVariables.size > 0) {\n    for (const osVar of osVariables) {\n      const line = `${osVar} = os.getenv('${osVar}')\\n`;\n      pythonCode += line;\n    }\n\n    pythonCode += '\\n';\n  }\n\n  if (cookieDict) {\n    pythonCode += cookieDict + '\\n';\n  }\n\n  if (headerDict) {\n    pythonCode += headerDict + '\\n';\n  }\n\n  if (queryDict) {\n    pythonCode += queryDict + '\\n';\n  }\n\n  if (dataString) {\n    pythonCode += dataString + '\\n';\n  } else if (filesString) {\n    pythonCode += filesString + '\\n';\n  }\n\n  pythonCode += requestLineWithUrlParams;\n\n  if (request.query) {\n    pythonCode += '\\n\\n' + '#NB. Original query string below. It seems impossible to parse and\\n' + '#reproduce query strings 100% accurately so the one below is given\\n' + '#in case the reproduced version is not \"correct\".\\n';\n    pythonCode += '# ' + requestLineWithOriginalUrl;\n  }\n\n  return pythonCode + '\\n';\n};\n\nmodule.exports = toPython;","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/curlconverter/generators/python.js"],"names":["util","require","jsesc","querystring","reprWithVariable","value","hasEnvironmentVariable","quotes","repr","getQueryDict","request","queryDict","paramName","query","rawValue","paramValue","Array","isArray","map","join","getDataString","data","toString","isDataRaw","startsWith","filePath","slice","isDataBinary","parsedQueryString","parse","sort","keyCount","Object","keys","length","singleKeyOnly","singularData","getMultipleDataString","repeatedKey","key","dataString","i","elementCount","getFilesString","filesString","multipartKey","multipartUploads","multipartValue","fileName","detectEnvVar","inputString","IN_ENV_VAR","IN_STRING","detectedVariables","Set","currState","envVarStartIndex","whiteSpaceSet","add","modifiedString","idx","currIdx","currChar","has","newVariable","substring","push","toPython","curlCommand","parseCurlCommand","osVariables","cookieDict","cookies","cookieName","detectedVars","size","newVar","headerDict","headers","headerName","hasVariable","url","match","urlWithoutQuery","requestLineWithUrlParams","method","requestLineWithOriginalUrl","requestLineBody","insecure","auth","splitAuth","split","user","password","replace","pythonCode","osVar","line","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst jsesc = require('jsesc')\nconst querystring = require('query-string')\n\nrequire('string.prototype.startswith')\n\nfunction reprWithVariable (value, hasEnvironmentVariable) {\n  if (!value) {\n    return \"''\"\n  }\n\n  if (!hasEnvironmentVariable) {\n    return \"'\" + jsesc(value, { quotes: 'single' }) + \"'\"\n  }\n\n  return 'f\"' + jsesc(value, { quotes: 'double' }) + '\"'\n}\n\nfunction repr (value) {\n  // In context of url parameters, don't accept nulls and such.\n  return reprWithVariable(value, false)\n}\n\nfunction getQueryDict (request) {\n  let queryDict = 'params = (\\n'\n  for (const paramName in request.query) {\n    const rawValue = request.query[paramName]\n    let paramValue\n    if (Array.isArray(rawValue)) {\n      paramValue = '[' + rawValue.map(repr).join(', ') + ']'\n    } else {\n      paramValue = repr(rawValue)\n    }\n    queryDict += '    (' + repr(paramName) + ', ' + paramValue + '),\\n'\n  }\n  queryDict += ')\\n'\n  return queryDict\n}\n\nfunction getDataString (request) {\n  if (typeof request.data === 'number') {\n    request.data = request.data.toString()\n  }\n  if (!request.isDataRaw && request.data.startsWith('@')) {\n    const filePath = request.data.slice(1)\n    if (request.isDataBinary) {\n      return 'data = open(\\'' + filePath + '\\', \\'rb\\').read()'\n    } else {\n      return 'data = open(\\'' + filePath + '\\')'\n    }\n  }\n\n  const parsedQueryString = querystring.parse(request.data, { sort: false })\n  const keyCount = Object.keys(parsedQueryString).length\n  const singleKeyOnly = keyCount === 1 && !parsedQueryString[Object.keys(parsedQueryString)[0]]\n  const singularData = request.isDataBinary || singleKeyOnly\n  if (singularData) {\n    return 'data = ' + repr(request.data) + '\\n'\n  } else {\n    return getMultipleDataString(request, parsedQueryString)\n  }\n}\n\nfunction getMultipleDataString (request, parsedQueryString) {\n  let repeatedKey = false\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key]\n    if (Array.isArray(value)) {\n      repeatedKey = true\n    }\n  }\n\n  let dataString\n  if (repeatedKey) {\n    dataString = 'data = [\\n'\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key]\n      if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) {\n          dataString += '  (' + repr(key) + ', ' + repr(value[i]) + '),\\n'\n        }\n      } else {\n        dataString += '  (' + repr(key) + ', ' + repr(value) + '),\\n'\n      }\n    }\n    dataString += ']\\n'\n  } else {\n    dataString = 'data = {\\n'\n    const elementCount = Object.keys(parsedQueryString).length\n    let i = 0\n    for (const key in parsedQueryString) {\n      const value = parsedQueryString[key]\n      dataString += '  ' + repr(key) + ': ' + repr(value)\n      if (i === elementCount - 1) {\n        dataString += '\\n'\n      } else {\n        dataString += ',\\n'\n      }\n      ++i\n    }\n    dataString += '}\\n'\n  }\n\n  return dataString\n}\n\nfunction getFilesString (request) {\n  // http://docs.python-requests.org/en/master/user/quickstart/#post-a-multipart-encoded-file\n  let filesString = 'files = {\\n'\n  for (const multipartKey in request.multipartUploads) {\n    const multipartValue = request.multipartUploads[multipartKey]\n    if (multipartValue.startsWith('@')) {\n      const fileName = multipartValue.slice(1)\n      filesString += '    ' + repr(multipartKey) + ': (' + repr(fileName) + ', open(' + repr(fileName) + \", 'rb')),\\n\"\n    } else {\n      filesString += '    ' + repr(multipartKey) + ': (None, ' + repr(multipartValue) + '),\\n'\n    }\n  }\n  filesString += '}\\n'\n\n  return filesString\n}\n\n// convertVarToStringFormat will convert if inputString to f\"...\" format\n// if inputString has possible variable as its substring\nfunction detectEnvVar (inputString) {\n  // Using state machine to detect environment variable\n  // Each character is an edge, state machine:\n  // IN_ENV_VAR: means that currently we are iterating inside a possible environment variable\n  // IN_STRING: means that currently we are iterating inside a normal string\n  // For example:\n  // \"Hi my name is $USER_NAME !\"\n  // '$' --> will move state from IN_STRING to IN_ENV_VAR\n  // ' ' --> will move state to IN_STRING, regardless the previous state\n\n  const IN_ENV_VAR = 0\n  const IN_STRING = 1\n\n  // We only care for the unique element\n  const detectedVariables = new Set()\n  let currState = IN_STRING\n  let envVarStartIndex = -1\n\n  const whiteSpaceSet = new Set()\n  whiteSpaceSet.add(' ')\n  whiteSpaceSet.add('\\n')\n  whiteSpaceSet.add('\\t')\n\n  const modifiedString = []\n  for (const idx in inputString) {\n    const currIdx = +idx\n    const currChar = inputString[currIdx]\n    if (currState === IN_ENV_VAR && whiteSpaceSet.has(currChar)) {\n      const newVariable = inputString.substring(envVarStartIndex, currIdx)\n\n      if (newVariable !== '') {\n        detectedVariables.add(newVariable)\n\n        // Change $ -> {\n        // Add } after the last variable name\n        modifiedString.push('{' + newVariable + '}' + currChar)\n      } else {\n        modifiedString.push('$' + currChar)\n      }\n      currState = IN_STRING\n      envVarStartIndex = -1\n      continue\n    }\n\n    if (currState === IN_ENV_VAR) {\n      // Skip until we actually have the new variable\n      continue\n    }\n\n    // currState === IN_STRING\n    if (currChar === '$') {\n      currState = IN_ENV_VAR\n      envVarStartIndex = currIdx + 1\n    } else {\n      modifiedString.push(currChar)\n    }\n  }\n\n  if (currState === IN_ENV_VAR) {\n    const newVariable = inputString.substring(envVarStartIndex, inputString.length)\n\n    if (newVariable !== '') {\n      detectedVariables.add(newVariable)\n      modifiedString.push('{' + newVariable + '}')\n    } else {\n      modifiedString.push('$')\n    }\n  }\n\n  return [detectedVariables, modifiedString.join('')]\n}\n\nconst toPython = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n\n  // Currently, only assuming that the env-var only used in\n  // the value part of cookies, params, or body\n  const osVariables = new Set()\n\n  let cookieDict\n  if (request.cookies) {\n    cookieDict = 'cookies = {\\n'\n    for (const cookieName in request.cookies) {\n      const [detectedVars, modifiedString] = detectEnvVar(request.cookies[cookieName])\n\n      const hasEnvironmentVariable = detectedVars.size > 0\n\n      for (const newVar of detectedVars) {\n        osVariables.add(newVar)\n      }\n\n      cookieDict += '    ' + repr(cookieName) + ': ' + reprWithVariable(modifiedString, hasEnvironmentVariable) + ',\\n'\n    }\n    cookieDict += '}\\n'\n  }\n  let headerDict\n  if (request.headers) {\n    headerDict = 'headers = {\\n'\n    for (const headerName in request.headers) {\n      const [detectedVars, modifiedString] = detectEnvVar(request.headers[headerName])\n\n      const hasVariable = detectedVars.size > 0\n\n      for (const newVar of detectedVars) {\n        osVariables.add(newVar)\n      }\n\n      headerDict += '    ' + repr(headerName) + ': ' + reprWithVariable(modifiedString, hasVariable) + ',\\n'\n    }\n    headerDict += '}\\n'\n  }\n\n  let queryDict\n  if (request.query) {\n    queryDict = getQueryDict(request)\n  }\n\n  let dataString\n  let filesString\n  if (typeof request.data === 'string' || typeof request.data === 'number') {\n    dataString = getDataString(request)\n  } else if (request.multipartUploads) {\n    filesString = getFilesString(request)\n  }\n  // curl automatically prepends 'http' if the scheme is missing, but python fails and returns an error\n  // we tack it on here to mimic curl\n  if (!request.url.match(/https?:/)) {\n    request.url = 'http://' + request.url\n  }\n  if (!request.urlWithoutQuery.match(/https?:/)) {\n    request.urlWithoutQuery = 'http://' + request.urlWithoutQuery\n  }\n  let requestLineWithUrlParams = 'response = requests.' + request.method + '(\\'' + request.urlWithoutQuery + '\\''\n  let requestLineWithOriginalUrl = 'response = requests.' + request.method + '(\\'' + request.url + '\\''\n\n  let requestLineBody = ''\n  if (request.headers) {\n    requestLineBody += ', headers=headers'\n  }\n  if (request.query) {\n    requestLineBody += ', params=params'\n  }\n  if (request.cookies) {\n    requestLineBody += ', cookies=cookies'\n  }\n  if (typeof request.data === 'string') {\n    requestLineBody += ', data=data'\n  } else if (request.multipartUploads) {\n    requestLineBody += ', files=files'\n  }\n  if (request.insecure) {\n    requestLineBody += ', verify=False'\n  }\n  if (request.auth) {\n    const splitAuth = request.auth.split(':')\n    const user = splitAuth[0] || ''\n    const password = splitAuth[1] || ''\n    requestLineBody += ', auth=(' + repr(user) + ', ' + repr(password) + ')'\n  }\n  requestLineBody += ')'\n\n  requestLineWithOriginalUrl += requestLineBody.replace(', params=params', '')\n  requestLineWithUrlParams += requestLineBody\n\n  let pythonCode = ''\n\n  // Sort import by name\n  if (osVariables.size > 0) {\n    pythonCode += 'import os\\n'\n  }\n\n  pythonCode += 'import requests\\n\\n'\n\n  if (osVariables.size > 0) {\n    for (const osVar of osVariables) {\n      const line = `${osVar} = os.getenv('${osVar}')\\n`\n      pythonCode += line\n    }\n\n    pythonCode += '\\n'\n  }\n\n  if (cookieDict) {\n    pythonCode += cookieDict + '\\n'\n  }\n  if (headerDict) {\n    pythonCode += headerDict + '\\n'\n  }\n  if (queryDict) {\n    pythonCode += queryDict + '\\n'\n  }\n  if (dataString) {\n    pythonCode += dataString + '\\n'\n  } else if (filesString) {\n    pythonCode += filesString + '\\n'\n  }\n  pythonCode += requestLineWithUrlParams\n\n  if (request.query) {\n    pythonCode += '\\n\\n' +\n            '#NB. Original query string below. It seems impossible to parse and\\n' +\n            '#reproduce query strings 100% accurately so the one below is given\\n' +\n            '#in case the reproduced version is not \"correct\".\\n'\n    pythonCode += '# ' + requestLineWithOriginalUrl\n  }\n\n  return pythonCode + '\\n'\n}\n\nmodule.exports = toPython\n"]},"metadata":{},"sourceType":"script"}