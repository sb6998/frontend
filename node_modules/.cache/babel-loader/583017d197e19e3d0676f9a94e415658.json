{"ast":null,"code":"const util = require('../util');\n\nconst jsesc = require('jsesc');\n\nconst doubleQuotes = str => jsesc(str, {\n  quotes: 'double'\n});\n\nconst toJava = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  let javaCode = '';\n\n  if (request.auth) {\n    javaCode += 'import javax.xml.bind.DatatypeConverter;\\n';\n  }\n\n  javaCode += 'import java.io.IOException;\\n';\n  javaCode += 'import java.io.InputStream;\\n';\n\n  if (request.data) {\n    javaCode += 'import java.io.OutputStreamWriter;\\n';\n  }\n\n  javaCode += 'import java.net.HttpURLConnection;\\n';\n  javaCode += 'import java.net.URL;\\n';\n  javaCode += 'import java.util.Scanner;\\n';\n  javaCode += '\\nclass Main {\\n\\n';\n  javaCode += '\\tpublic static void main(String[] args) throws IOException {\\n';\n  javaCode += '\\t\\tURL url = new URL(\"' + request.url + '\");\\n';\n  javaCode += '\\t\\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\\n';\n  javaCode += '\\t\\thttpConn.setRequestMethod(\"' + request.method.toUpperCase() + '\");\\n\\n';\n  let gzip = false;\n\n  if (request.headers) {\n    for (const headerName in request.headers) {\n      javaCode += '\\t\\thttpConn.setRequestProperty(\"' + headerName + '\", \"' + doubleQuotes(request.headers[headerName]) + '\");\\n';\n\n      if (headerName.toLowerCase() === 'accept-encoding') {\n        gzip = request.headers[headerName].indexOf('gzip') !== -1;\n      }\n    }\n\n    javaCode += '\\n';\n  }\n\n  if (request.cookies) {\n    const cookieString = util.serializeCookies(request.cookies);\n    javaCode += '\\t\\thttpConn.setRequestProperty(\"Cookie\", \"' + doubleQuotes(cookieString) + '\");\\n';\n    javaCode += '\\n';\n  }\n\n  if (request.auth) {\n    javaCode += '\\t\\tbyte[] message = (\"' + doubleQuotes(request.auth) + '\").getBytes(\"UTF-8\");\\n';\n    javaCode += '\\t\\tString basicAuth = DatatypeConverter.printBase64Binary(message);\\n';\n    javaCode += '\\t\\thttpConn.setRequestProperty(\"Authorization\", \"Basic \" + basicAuth);\\n';\n    javaCode += '\\n';\n  }\n\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString();\n    }\n\n    request.data = doubleQuotes(request.data);\n    javaCode += '\\t\\thttpConn.setDoOutput(true);\\n';\n    javaCode += '\\t\\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\\n';\n    javaCode += '\\t\\twriter.write(\"' + request.data + '\");\\n';\n    javaCode += '\\t\\twriter.flush();\\n';\n    javaCode += '\\t\\twriter.close();\\n';\n    javaCode += '\\t\\thttpConn.getOutputStream().close();\\n';\n    javaCode += '\\n';\n  }\n\n  javaCode += '\\t\\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\\n';\n  javaCode += '\\t\\t\\t\\t? httpConn.getInputStream()\\n';\n  javaCode += '\\t\\t\\t\\t: httpConn.getErrorStream();\\n';\n\n  if (gzip) {\n    javaCode += '\\t\\tif (\"gzip\".equals(httpConn.getContentEncoding())) {\\n';\n    javaCode += '\\t\\t\\tresponseStream = new GZIPInputStream(responseStream);\\n';\n    javaCode += '\\t\\t}\\n';\n  }\n\n  javaCode += '\\t\\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\\\\\A\");\\n';\n  javaCode += '\\t\\tString response = s.hasNext() ? s.next() : \"\";\\n';\n  javaCode += '\\t\\tSystem.out.println(response);\\n';\n  javaCode += '\\t}\\n';\n  javaCode += '}';\n  return javaCode + '\\n';\n};\n\nmodule.exports = toJava;","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/curlconverter/generators/java.js"],"names":["util","require","jsesc","doubleQuotes","str","quotes","toJava","curlCommand","request","parseCurlCommand","javaCode","auth","data","url","method","toUpperCase","gzip","headers","headerName","toLowerCase","indexOf","cookies","cookieString","serializeCookies","toString","module","exports"],"mappings":"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","sourcesContent":["const util = require('../util')\nconst jsesc = require('jsesc')\n\nconst doubleQuotes = str => jsesc(str, { quotes: 'double' })\n\nconst toJava = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n  let javaCode = ''\n\n  if (request.auth) {\n    javaCode += 'import javax.xml.bind.DatatypeConverter;\\n'\n  }\n  javaCode += 'import java.io.IOException;\\n'\n  javaCode += 'import java.io.InputStream;\\n'\n  if (request.data) {\n    javaCode += 'import java.io.OutputStreamWriter;\\n'\n  }\n\n  javaCode += 'import java.net.HttpURLConnection;\\n'\n\n  javaCode += 'import java.net.URL;\\n'\n  javaCode += 'import java.util.Scanner;\\n'\n\n  javaCode += '\\nclass Main {\\n\\n'\n\n  javaCode += '\\tpublic static void main(String[] args) throws IOException {\\n'\n  javaCode += '\\t\\tURL url = new URL(\"' + request.url + '\");\\n'\n  javaCode += '\\t\\tHttpURLConnection httpConn = (HttpURLConnection) url.openConnection();\\n'\n  javaCode += '\\t\\thttpConn.setRequestMethod(\"' + request.method.toUpperCase() + '\");\\n\\n'\n\n  let gzip = false\n  if (request.headers) {\n    for (const headerName in request.headers) {\n      javaCode += '\\t\\thttpConn.setRequestProperty(\"' + headerName + '\", \"' + doubleQuotes(request.headers[headerName]) + '\");\\n'\n      if (headerName.toLowerCase() === 'accept-encoding') {\n        gzip = request.headers[headerName].indexOf('gzip') !== -1\n      }\n    }\n    javaCode += '\\n'\n  }\n\n  if (request.cookies) {\n    const cookieString = util.serializeCookies(request.cookies)\n    javaCode += '\\t\\thttpConn.setRequestProperty(\"Cookie\", \"' + doubleQuotes(cookieString) + '\");\\n'\n    javaCode += '\\n'\n  }\n\n  if (request.auth) {\n    javaCode += '\\t\\tbyte[] message = (\"' + doubleQuotes(request.auth) + '\").getBytes(\"UTF-8\");\\n'\n    javaCode += '\\t\\tString basicAuth = DatatypeConverter.printBase64Binary(message);\\n'\n    javaCode += '\\t\\thttpConn.setRequestProperty(\"Authorization\", \"Basic \" + basicAuth);\\n'\n    javaCode += '\\n'\n  }\n\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString()\n    }\n    request.data = doubleQuotes(request.data)\n    javaCode += '\\t\\thttpConn.setDoOutput(true);\\n'\n    javaCode += '\\t\\tOutputStreamWriter writer = new OutputStreamWriter(httpConn.getOutputStream());\\n'\n    javaCode += '\\t\\twriter.write(\"' + request.data + '\");\\n'\n    javaCode += '\\t\\twriter.flush();\\n'\n    javaCode += '\\t\\twriter.close();\\n'\n    javaCode += '\\t\\thttpConn.getOutputStream().close();\\n'\n    javaCode += '\\n'\n  }\n\n  javaCode += '\\t\\tInputStream responseStream = httpConn.getResponseCode() / 100 == 2\\n'\n  javaCode += '\\t\\t\\t\\t? httpConn.getInputStream()\\n'\n  javaCode += '\\t\\t\\t\\t: httpConn.getErrorStream();\\n'\n  if (gzip) {\n    javaCode += '\\t\\tif (\"gzip\".equals(httpConn.getContentEncoding())) {\\n'\n    javaCode += '\\t\\t\\tresponseStream = new GZIPInputStream(responseStream);\\n'\n    javaCode += '\\t\\t}\\n'\n  }\n  javaCode += '\\t\\tScanner s = new Scanner(responseStream).useDelimiter(\"\\\\\\\\A\");\\n'\n  javaCode += '\\t\\tString response = s.hasNext() ? s.next() : \"\";\\n'\n  javaCode += '\\t\\tSystem.out.println(response);\\n'\n\n  javaCode += '\\t}\\n'\n  javaCode += '}'\n\n  return javaCode + '\\n'\n}\n\nmodule.exports = toJava\n"]},"metadata":{},"sourceType":"script"}