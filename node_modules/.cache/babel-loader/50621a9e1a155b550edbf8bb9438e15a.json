{"ast":null,"code":"import { YError } from '../yerror.js';\nlet previouslyVisitedConfigs = [];\nlet shim;\nexport function applyExtends(config, cwd, mergeExtends, _shim) {\n  shim = _shim;\n  let defaultConfig = {};\n\n  if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n    if (typeof config.extends !== 'string') return defaultConfig;\n    const isPath = /\\.json|\\..*rc$/.test(config.extends);\n    let pathToDefault = null;\n\n    if (!isPath) {\n      try {\n        pathToDefault = require.resolve(config.extends);\n      } catch (_err) {\n        return config;\n      }\n    } else {\n      pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n    }\n\n    checkForCircularExtends(pathToDefault);\n    previouslyVisitedConfigs.push(pathToDefault);\n    defaultConfig = isPath ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8')) : require(config.extends);\n    delete config.extends;\n    defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n  }\n\n  previouslyVisitedConfigs = [];\n  return mergeExtends ? mergeDeep(defaultConfig, config) : Object.assign({}, defaultConfig, config);\n}\n\nfunction checkForCircularExtends(cfgPath) {\n  if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n    throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n  }\n}\n\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n  return shim.path.resolve(cwd, pathToExtend);\n}\n\nfunction mergeDeep(config1, config2) {\n  const target = {};\n\n  function isObject(obj) {\n    return obj && typeof obj === 'object' && !Array.isArray(obj);\n  }\n\n  Object.assign(target, config1);\n\n  for (const key of Object.keys(config2)) {\n    if (isObject(config2[key]) && isObject(target[key])) {\n      target[key] = mergeDeep(config1[key], config2[key]);\n    } else {\n      target[key] = config2[key];\n    }\n  }\n\n  return target;\n}","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/@curlconverter/yargs/build/lib/utils/apply-extends.js"],"names":["YError","previouslyVisitedConfigs","shim","applyExtends","config","cwd","mergeExtends","_shim","defaultConfig","Object","prototype","hasOwnProperty","call","extends","isPath","test","pathToDefault","require","resolve","_err","getPathToDefaultConfig","checkForCircularExtends","push","JSON","parse","readFileSync","path","dirname","mergeDeep","assign","cfgPath","indexOf","pathToExtend","config1","config2","target","isObject","obj","Array","isArray","key","keys"],"mappings":"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","sourcesContent":["import { YError } from '../yerror.js';\nlet previouslyVisitedConfigs = [];\nlet shim;\nexport function applyExtends(config, cwd, mergeExtends, _shim) {\n    shim = _shim;\n    let defaultConfig = {};\n    if (Object.prototype.hasOwnProperty.call(config, 'extends')) {\n        if (typeof config.extends !== 'string')\n            return defaultConfig;\n        const isPath = /\\.json|\\..*rc$/.test(config.extends);\n        let pathToDefault = null;\n        if (!isPath) {\n            try {\n                pathToDefault = require.resolve(config.extends);\n            }\n            catch (_err) {\n                return config;\n            }\n        }\n        else {\n            pathToDefault = getPathToDefaultConfig(cwd, config.extends);\n        }\n        checkForCircularExtends(pathToDefault);\n        previouslyVisitedConfigs.push(pathToDefault);\n        defaultConfig = isPath\n            ? JSON.parse(shim.readFileSync(pathToDefault, 'utf8'))\n            : require(config.extends);\n        delete config.extends;\n        defaultConfig = applyExtends(defaultConfig, shim.path.dirname(pathToDefault), mergeExtends, shim);\n    }\n    previouslyVisitedConfigs = [];\n    return mergeExtends\n        ? mergeDeep(defaultConfig, config)\n        : Object.assign({}, defaultConfig, config);\n}\nfunction checkForCircularExtends(cfgPath) {\n    if (previouslyVisitedConfigs.indexOf(cfgPath) > -1) {\n        throw new YError(`Circular extended configurations: '${cfgPath}'.`);\n    }\n}\nfunction getPathToDefaultConfig(cwd, pathToExtend) {\n    return shim.path.resolve(cwd, pathToExtend);\n}\nfunction mergeDeep(config1, config2) {\n    const target = {};\n    function isObject(obj) {\n        return obj && typeof obj === 'object' && !Array.isArray(obj);\n    }\n    Object.assign(target, config1);\n    for (const key of Object.keys(config2)) {\n        if (isObject(config2[key]) && isObject(target[key])) {\n            target[key] = mergeDeep(config1[key], config2[key]);\n        }\n        else {\n            target[key] = config2[key];\n        }\n    }\n    return target;\n}\n"]},"metadata":{},"sourceType":"module"}