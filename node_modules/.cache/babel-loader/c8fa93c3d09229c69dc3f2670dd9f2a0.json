{"ast":null,"code":"import { assertNotStrictEqual } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance } from './yargs-factory.js';\nimport { maybeAsyncResult } from './utils/maybe-async-result.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport class CommandInstance {\n  constructor(usage, validation, globalMiddleware, shim) {\n    this.requireCache = new Set();\n    this.handlers = {};\n    this.aliasMap = {};\n    this.frozens = [];\n    this.shim = shim;\n    this.usage = usage;\n    this.globalMiddleware = globalMiddleware;\n    this.validation = validation;\n  }\n\n  addDirectory(dir, req, callerFile, opts) {\n    opts = opts || {};\n    if (typeof opts.recurse !== 'boolean') opts.recurse = false;\n    if (!Array.isArray(opts.extensions)) opts.extensions = ['js'];\n    const parentVisit = typeof opts.visit === 'function' ? opts.visit : o => o;\n\n    opts.visit = (obj, joined, filename) => {\n      const visited = parentVisit(obj, joined, filename);\n\n      if (visited) {\n        if (this.requireCache.has(joined)) return visited;else this.requireCache.add(joined);\n        this.addHandler(visited);\n      }\n\n      return visited;\n    };\n\n    this.shim.requireDirectory({\n      require: req,\n      filename: callerFile\n    }, dir, opts);\n  }\n\n  addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n    let aliases = [];\n    const middlewares = commandMiddlewareFactory(commandMiddleware);\n\n    handler = handler || (() => {});\n\n    if (Array.isArray(cmd)) {\n      if (isCommandAndAliases(cmd)) {\n        [cmd, ...aliases] = cmd;\n      } else {\n        for (const command of cmd) {\n          this.addHandler(command);\n        }\n      }\n    } else if (isCommandHandlerDefinition(cmd)) {\n      let command = Array.isArray(cmd.command) || typeof cmd.command === 'string' ? cmd.command : this.moduleName(cmd);\n      if (cmd.aliases) command = [].concat(command).concat(cmd.aliases);\n      this.addHandler(command, this.extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n      return;\n    } else if (isCommandBuilderDefinition(builder)) {\n      this.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n      return;\n    }\n\n    if (typeof cmd === 'string') {\n      const parsedCommand = parseCommand(cmd);\n      aliases = aliases.map(alias => parseCommand(alias).cmd);\n      let isDefault = false;\n      const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n        if (DEFAULT_MARKER.test(c)) {\n          isDefault = true;\n          return false;\n        }\n\n        return true;\n      });\n      if (parsedAliases.length === 0 && isDefault) parsedAliases.push('$0');\n\n      if (isDefault) {\n        parsedCommand.cmd = parsedAliases[0];\n        aliases = parsedAliases.slice(1);\n        cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n      }\n\n      aliases.forEach(alias => {\n        this.aliasMap[alias] = parsedCommand.cmd;\n      });\n\n      if (description !== false) {\n        this.usage.command(cmd, description, isDefault, aliases, deprecated);\n      }\n\n      this.handlers[parsedCommand.cmd] = {\n        original: cmd,\n        description,\n        handler,\n        builder: builder || {},\n        middlewares,\n        deprecated,\n        demanded: parsedCommand.demanded,\n        optional: parsedCommand.optional\n      };\n      if (isDefault) this.defaultCommand = this.handlers[parsedCommand.cmd];\n    }\n  }\n\n  getCommandHandlers() {\n    return this.handlers;\n  }\n\n  getCommands() {\n    return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));\n  }\n\n  hasDefaultCommand() {\n    return !!this.defaultCommand;\n  }\n\n  runCommand(command, yargs, parsed, commandIndex, helpOnly, helpOrVersionSet) {\n    const commandHandler = this.handlers[command] || this.handlers[this.aliasMap[command]] || this.defaultCommand;\n    const currentContext = yargs.getInternalMethods().getContext();\n    const parentCommands = currentContext.commands.slice();\n    const isDefaultCommand = !command;\n\n    if (command) {\n      currentContext.commands.push(command);\n      currentContext.fullCommands.push(commandHandler.original);\n    }\n\n    const builderResult = this.applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, parsed.aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet);\n    return isPromise(builderResult) ? builderResult.then(result => this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, result.innerArgv, currentContext, helpOnly, result.aliases, yargs)) : this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, builderResult.innerArgv, currentContext, helpOnly, builderResult.aliases, yargs);\n  }\n\n  applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet) {\n    const builder = commandHandler.builder;\n    let innerYargs = yargs;\n\n    if (isCommandBuilderCallback(builder)) {\n      const builderOutput = builder(yargs.getInternalMethods().reset(aliases), helpOrVersionSet);\n\n      if (isPromise(builderOutput)) {\n        return builderOutput.then(output => {\n          innerYargs = isYargsInstance(output) ? output : yargs;\n          return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n        });\n      }\n    } else if (isCommandBuilderOptionDefinitions(builder)) {\n      innerYargs = yargs.getInternalMethods().reset(aliases);\n      Object.keys(commandHandler.builder).forEach(key => {\n        innerYargs.option(key, builder[key]);\n      });\n    }\n\n    return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n  }\n\n  parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly) {\n    if (isDefaultCommand) innerYargs.getInternalMethods().getUsageInstance().unfreeze();\n\n    if (this.shouldUpdateUsage(innerYargs)) {\n      innerYargs.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n    }\n\n    const innerArgv = innerYargs.getInternalMethods().runYargsParserAndExecuteCommands(null, undefined, true, commandIndex, helpOnly);\n    return isPromise(innerArgv) ? innerArgv.then(argv => ({\n      aliases: innerYargs.parsed.aliases,\n      innerArgv: argv\n    })) : {\n      aliases: innerYargs.parsed.aliases,\n      innerArgv: innerArgv\n    };\n  }\n\n  shouldUpdateUsage(yargs) {\n    return !yargs.getInternalMethods().getUsageInstance().getUsageDisabled() && yargs.getInternalMethods().getUsageInstance().getUsage().length === 0;\n  }\n\n  usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n    const c = DEFAULT_MARKER.test(commandHandler.original) ? commandHandler.original.replace(DEFAULT_MARKER, '').trim() : commandHandler.original;\n    const pc = parentCommands.filter(c => {\n      return !DEFAULT_MARKER.test(c);\n    });\n    pc.push(c);\n    return `$0 ${pc.join(' ')}`;\n  }\n\n  applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, helpOnly, aliases, yargs) {\n    let positionalMap = {};\n    if (helpOnly) return innerArgv;\n\n    if (!yargs.getInternalMethods().getHasOutput()) {\n      positionalMap = this.populatePositionals(commandHandler, innerArgv, currentContext, yargs);\n    }\n\n    const middlewares = this.globalMiddleware.getMiddleware().slice(0).concat(commandHandler.middlewares);\n    innerArgv = applyMiddleware(innerArgv, yargs, middlewares, true);\n\n    if (!yargs.getInternalMethods().getHasOutput()) {\n      const validation = yargs.getInternalMethods().runValidation(aliases, positionalMap, yargs.parsed.error, isDefaultCommand);\n      innerArgv = maybeAsyncResult(innerArgv, result => {\n        validation(result);\n        return result;\n      });\n    }\n\n    if (commandHandler.handler && !yargs.getInternalMethods().getHasOutput()) {\n      yargs.getInternalMethods().setHasOutput();\n      const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n      yargs.getInternalMethods().postProcess(innerArgv, populateDoubleDash, false, false);\n      innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n      innerArgv = maybeAsyncResult(innerArgv, result => {\n        const handlerResult = commandHandler.handler(result);\n        return isPromise(handlerResult) ? handlerResult.then(() => result) : result;\n      });\n\n      if (!isDefaultCommand) {\n        yargs.getInternalMethods().getUsageInstance().cacheHelpMessage();\n      }\n\n      if (isPromise(innerArgv) && !yargs.getInternalMethods().hasParseCallback()) {\n        innerArgv.catch(error => {\n          try {\n            yargs.getInternalMethods().getUsageInstance().fail(null, error);\n          } catch (_err) {}\n        });\n      }\n    }\n\n    if (!isDefaultCommand) {\n      currentContext.commands.pop();\n      currentContext.fullCommands.pop();\n    }\n\n    return innerArgv;\n  }\n\n  populatePositionals(commandHandler, argv, context, yargs) {\n    argv._ = argv._.slice(context.commands.length);\n    const demanded = commandHandler.demanded.slice(0);\n    const optional = commandHandler.optional.slice(0);\n    const positionalMap = {};\n    this.validation.positionalCount(demanded.length, argv._.length);\n\n    while (demanded.length) {\n      const demand = demanded.shift();\n      this.populatePositional(demand, argv, positionalMap);\n    }\n\n    while (optional.length) {\n      const maybe = optional.shift();\n      this.populatePositional(maybe, argv, positionalMap);\n    }\n\n    argv._ = context.commands.concat(argv._.map(a => '' + a));\n    this.postProcessPositionals(argv, positionalMap, this.cmdToParseOptions(commandHandler.original), yargs);\n    return positionalMap;\n  }\n\n  populatePositional(positional, argv, positionalMap) {\n    const cmd = positional.cmd[0];\n\n    if (positional.variadic) {\n      positionalMap[cmd] = argv._.splice(0).map(String);\n    } else {\n      if (argv._.length) positionalMap[cmd] = [String(argv._.shift())];\n    }\n  }\n\n  cmdToParseOptions(cmdString) {\n    const parseOptions = {\n      array: [],\n      default: {},\n      alias: {},\n      demand: {}\n    };\n    const parsed = parseCommand(cmdString);\n    parsed.demanded.forEach(d => {\n      const [cmd, ...aliases] = d.cmd;\n\n      if (d.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n\n      parseOptions.alias[cmd] = aliases;\n      parseOptions.demand[cmd] = true;\n    });\n    parsed.optional.forEach(o => {\n      const [cmd, ...aliases] = o.cmd;\n\n      if (o.variadic) {\n        parseOptions.array.push(cmd);\n        parseOptions.default[cmd] = [];\n      }\n\n      parseOptions.alias[cmd] = aliases;\n    });\n    return parseOptions;\n  }\n\n  postProcessPositionals(argv, positionalMap, parseOptions, yargs) {\n    const options = Object.assign({}, yargs.getOptions());\n    options.default = Object.assign(parseOptions.default, options.default);\n\n    for (const key of Object.keys(parseOptions.alias)) {\n      options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n    }\n\n    options.array = options.array.concat(parseOptions.array);\n    options.config = {};\n    const unparsed = [];\n    Object.keys(positionalMap).forEach(key => {\n      positionalMap[key].map(value => {\n        if (options.configuration['unknown-options-as-args']) options.key[key] = true;\n        unparsed.push(`--${key}`);\n        unparsed.push(value);\n      });\n    });\n    if (!unparsed.length) return;\n    const config = Object.assign({}, options.configuration, {\n      'populate--': false\n    });\n    const parsed = this.shim.Parser.detailed(unparsed, Object.assign({}, options, {\n      configuration: config\n    }));\n\n    if (parsed.error) {\n      yargs.getInternalMethods().getUsageInstance().fail(parsed.error.message, parsed.error);\n    } else {\n      const positionalKeys = Object.keys(positionalMap);\n      Object.keys(positionalMap).forEach(key => {\n        positionalKeys.push(...parsed.aliases[key]);\n      });\n      const defaults = yargs.getOptions().default;\n      Object.keys(parsed.argv).forEach(key => {\n        if (positionalKeys.includes(key)) {\n          if (!positionalMap[key]) positionalMap[key] = parsed.argv[key];\n\n          if (!Object.prototype.hasOwnProperty.call(defaults, key) && Object.prototype.hasOwnProperty.call(argv, key) && Object.prototype.hasOwnProperty.call(parsed.argv, key) && (Array.isArray(argv[key]) || Array.isArray(parsed.argv[key]))) {\n            argv[key] = [].concat(argv[key], parsed.argv[key]);\n          } else {\n            argv[key] = parsed.argv[key];\n          }\n        }\n      });\n    }\n  }\n\n  runDefaultBuilderOn(yargs) {\n    if (!this.defaultCommand) return;\n\n    if (this.shouldUpdateUsage(yargs)) {\n      const commandString = DEFAULT_MARKER.test(this.defaultCommand.original) ? this.defaultCommand.original : this.defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n      yargs.getInternalMethods().getUsageInstance().usage(commandString, this.defaultCommand.description);\n    }\n\n    const builder = this.defaultCommand.builder;\n\n    if (isCommandBuilderCallback(builder)) {\n      return builder(yargs, true);\n    } else if (!isCommandBuilderDefinition(builder)) {\n      Object.keys(builder).forEach(key => {\n        yargs.option(key, builder[key]);\n      });\n    }\n\n    return undefined;\n  }\n\n  moduleName(obj) {\n    const mod = whichModule(obj);\n    if (!mod) throw new Error(`No command name given for module: ${this.shim.inspect(obj)}`);\n    return this.commandFromFilename(mod.filename);\n  }\n\n  commandFromFilename(filename) {\n    return this.shim.path.basename(filename, this.shim.path.extname(filename));\n  }\n\n  extractDesc(_ref) {\n    let {\n      describe,\n      description,\n      desc\n    } = _ref;\n\n    for (const test of [describe, description, desc]) {\n      if (typeof test === 'string' || test === false) return test;\n      assertNotStrictEqual(test, true, this.shim);\n    }\n\n    return false;\n  }\n\n  freeze() {\n    this.frozens.push({\n      handlers: this.handlers,\n      aliasMap: this.aliasMap,\n      defaultCommand: this.defaultCommand\n    });\n  }\n\n  unfreeze() {\n    const frozen = this.frozens.pop();\n    assertNotStrictEqual(frozen, undefined, this.shim);\n    ({\n      handlers: this.handlers,\n      aliasMap: this.aliasMap,\n      defaultCommand: this.defaultCommand\n    } = frozen);\n  }\n\n  reset() {\n    this.handlers = {};\n    this.aliasMap = {};\n    this.defaultCommand = undefined;\n    this.requireCache = new Set();\n    return this;\n  }\n\n}\nexport function command(usage, validation, globalMiddleware, shim) {\n  return new CommandInstance(usage, validation, globalMiddleware, shim);\n}\nexport function isCommandBuilderDefinition(builder) {\n  return typeof builder === 'object' && !!builder.builder && typeof builder.handler === 'function';\n}\n\nfunction isCommandAndAliases(cmd) {\n  return cmd.every(c => typeof c === 'string');\n}\n\nexport function isCommandBuilderCallback(builder) {\n  return typeof builder === 'function';\n}\n\nfunction isCommandBuilderOptionDefinitions(builder) {\n  return typeof builder === 'object';\n}\n\nexport function isCommandHandlerDefinition(cmd) {\n  return typeof cmd === 'object' && !Array.isArray(cmd);\n}","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/@curlconverter/yargs/build/lib/command.js"],"names":["assertNotStrictEqual","isPromise","applyMiddleware","commandMiddlewareFactory","parseCommand","isYargsInstance","maybeAsyncResult","whichModule","DEFAULT_MARKER","CommandInstance","constructor","usage","validation","globalMiddleware","shim","requireCache","Set","handlers","aliasMap","frozens","addDirectory","dir","req","callerFile","opts","recurse","Array","isArray","extensions","parentVisit","visit","o","obj","joined","filename","visited","has","add","addHandler","requireDirectory","require","cmd","description","builder","handler","commandMiddleware","deprecated","aliases","middlewares","isCommandAndAliases","command","isCommandHandlerDefinition","moduleName","concat","extractDesc","isCommandBuilderDefinition","parsedCommand","map","alias","isDefault","parsedAliases","filter","c","test","length","push","slice","replace","forEach","original","demanded","optional","defaultCommand","getCommandHandlers","getCommands","Object","keys","hasDefaultCommand","runCommand","yargs","parsed","commandIndex","helpOnly","helpOrVersionSet","commandHandler","currentContext","getInternalMethods","getContext","parentCommands","commands","isDefaultCommand","fullCommands","builderResult","applyBuilderUpdateUsageAndParse","then","result","applyMiddlewareAndGetResult","innerArgv","innerYargs","isCommandBuilderCallback","builderOutput","reset","output","parseAndUpdateUsage","isCommandBuilderOptionDefinitions","key","option","getUsageInstance","unfreeze","shouldUpdateUsage","usageFromParentCommandsCommandHandler","runYargsParserAndExecuteCommands","undefined","argv","getUsageDisabled","getUsage","trim","pc","join","positionalMap","getHasOutput","populatePositionals","getMiddleware","runValidation","error","setHasOutput","populateDoubleDash","getOptions","configuration","postProcess","handlerResult","cacheHelpMessage","hasParseCallback","catch","fail","_err","pop","context","_","positionalCount","demand","shift","populatePositional","maybe","a","postProcessPositionals","cmdToParseOptions","positional","variadic","splice","String","cmdString","parseOptions","array","default","d","options","assign","config","unparsed","value","Parser","detailed","message","positionalKeys","defaults","includes","prototype","hasOwnProperty","call","runDefaultBuilderOn","commandString","mod","Error","inspect","commandFromFilename","path","basename","extname","describe","desc","freeze","frozen","every"],"mappings":"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","sourcesContent":["import { assertNotStrictEqual, } from './typings/common-types.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { applyMiddleware, commandMiddlewareFactory, } from './middleware.js';\nimport { parseCommand } from './parse-command.js';\nimport { isYargsInstance, } from './yargs-factory.js';\nimport { maybeAsyncResult } from './utils/maybe-async-result.js';\nimport whichModule from './utils/which-module.js';\nconst DEFAULT_MARKER = /(^\\*)|(^\\$0)/;\nexport class CommandInstance {\n    constructor(usage, validation, globalMiddleware, shim) {\n        this.requireCache = new Set();\n        this.handlers = {};\n        this.aliasMap = {};\n        this.frozens = [];\n        this.shim = shim;\n        this.usage = usage;\n        this.globalMiddleware = globalMiddleware;\n        this.validation = validation;\n    }\n    addDirectory(dir, req, callerFile, opts) {\n        opts = opts || {};\n        if (typeof opts.recurse !== 'boolean')\n            opts.recurse = false;\n        if (!Array.isArray(opts.extensions))\n            opts.extensions = ['js'];\n        const parentVisit = typeof opts.visit === 'function' ? opts.visit : (o) => o;\n        opts.visit = (obj, joined, filename) => {\n            const visited = parentVisit(obj, joined, filename);\n            if (visited) {\n                if (this.requireCache.has(joined))\n                    return visited;\n                else\n                    this.requireCache.add(joined);\n                this.addHandler(visited);\n            }\n            return visited;\n        };\n        this.shim.requireDirectory({ require: req, filename: callerFile }, dir, opts);\n    }\n    addHandler(cmd, description, builder, handler, commandMiddleware, deprecated) {\n        let aliases = [];\n        const middlewares = commandMiddlewareFactory(commandMiddleware);\n        handler = handler || (() => { });\n        if (Array.isArray(cmd)) {\n            if (isCommandAndAliases(cmd)) {\n                [cmd, ...aliases] = cmd;\n            }\n            else {\n                for (const command of cmd) {\n                    this.addHandler(command);\n                }\n            }\n        }\n        else if (isCommandHandlerDefinition(cmd)) {\n            let command = Array.isArray(cmd.command) || typeof cmd.command === 'string'\n                ? cmd.command\n                : this.moduleName(cmd);\n            if (cmd.aliases)\n                command = [].concat(command).concat(cmd.aliases);\n            this.addHandler(command, this.extractDesc(cmd), cmd.builder, cmd.handler, cmd.middlewares, cmd.deprecated);\n            return;\n        }\n        else if (isCommandBuilderDefinition(builder)) {\n            this.addHandler([cmd].concat(aliases), description, builder.builder, builder.handler, builder.middlewares, builder.deprecated);\n            return;\n        }\n        if (typeof cmd === 'string') {\n            const parsedCommand = parseCommand(cmd);\n            aliases = aliases.map(alias => parseCommand(alias).cmd);\n            let isDefault = false;\n            const parsedAliases = [parsedCommand.cmd].concat(aliases).filter(c => {\n                if (DEFAULT_MARKER.test(c)) {\n                    isDefault = true;\n                    return false;\n                }\n                return true;\n            });\n            if (parsedAliases.length === 0 && isDefault)\n                parsedAliases.push('$0');\n            if (isDefault) {\n                parsedCommand.cmd = parsedAliases[0];\n                aliases = parsedAliases.slice(1);\n                cmd = cmd.replace(DEFAULT_MARKER, parsedCommand.cmd);\n            }\n            aliases.forEach(alias => {\n                this.aliasMap[alias] = parsedCommand.cmd;\n            });\n            if (description !== false) {\n                this.usage.command(cmd, description, isDefault, aliases, deprecated);\n            }\n            this.handlers[parsedCommand.cmd] = {\n                original: cmd,\n                description,\n                handler,\n                builder: builder || {},\n                middlewares,\n                deprecated,\n                demanded: parsedCommand.demanded,\n                optional: parsedCommand.optional,\n            };\n            if (isDefault)\n                this.defaultCommand = this.handlers[parsedCommand.cmd];\n        }\n    }\n    getCommandHandlers() {\n        return this.handlers;\n    }\n    getCommands() {\n        return Object.keys(this.handlers).concat(Object.keys(this.aliasMap));\n    }\n    hasDefaultCommand() {\n        return !!this.defaultCommand;\n    }\n    runCommand(command, yargs, parsed, commandIndex, helpOnly, helpOrVersionSet) {\n        const commandHandler = this.handlers[command] ||\n            this.handlers[this.aliasMap[command]] ||\n            this.defaultCommand;\n        const currentContext = yargs.getInternalMethods().getContext();\n        const parentCommands = currentContext.commands.slice();\n        const isDefaultCommand = !command;\n        if (command) {\n            currentContext.commands.push(command);\n            currentContext.fullCommands.push(commandHandler.original);\n        }\n        const builderResult = this.applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, parsed.aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet);\n        return isPromise(builderResult)\n            ? builderResult.then(result => this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, result.innerArgv, currentContext, helpOnly, result.aliases, yargs))\n            : this.applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, builderResult.innerArgv, currentContext, helpOnly, builderResult.aliases, yargs);\n    }\n    applyBuilderUpdateUsageAndParse(isDefaultCommand, commandHandler, yargs, aliases, parentCommands, commandIndex, helpOnly, helpOrVersionSet) {\n        const builder = commandHandler.builder;\n        let innerYargs = yargs;\n        if (isCommandBuilderCallback(builder)) {\n            const builderOutput = builder(yargs.getInternalMethods().reset(aliases), helpOrVersionSet);\n            if (isPromise(builderOutput)) {\n                return builderOutput.then(output => {\n                    innerYargs = isYargsInstance(output) ? output : yargs;\n                    return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n                });\n            }\n        }\n        else if (isCommandBuilderOptionDefinitions(builder)) {\n            innerYargs = yargs.getInternalMethods().reset(aliases);\n            Object.keys(commandHandler.builder).forEach(key => {\n                innerYargs.option(key, builder[key]);\n            });\n        }\n        return this.parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly);\n    }\n    parseAndUpdateUsage(isDefaultCommand, commandHandler, innerYargs, parentCommands, commandIndex, helpOnly) {\n        if (isDefaultCommand)\n            innerYargs.getInternalMethods().getUsageInstance().unfreeze();\n        if (this.shouldUpdateUsage(innerYargs)) {\n            innerYargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .usage(this.usageFromParentCommandsCommandHandler(parentCommands, commandHandler), commandHandler.description);\n        }\n        const innerArgv = innerYargs\n            .getInternalMethods()\n            .runYargsParserAndExecuteCommands(null, undefined, true, commandIndex, helpOnly);\n        return isPromise(innerArgv)\n            ? innerArgv.then(argv => ({\n                aliases: innerYargs.parsed.aliases,\n                innerArgv: argv,\n            }))\n            : {\n                aliases: innerYargs.parsed.aliases,\n                innerArgv: innerArgv,\n            };\n    }\n    shouldUpdateUsage(yargs) {\n        return (!yargs.getInternalMethods().getUsageInstance().getUsageDisabled() &&\n            yargs.getInternalMethods().getUsageInstance().getUsage().length === 0);\n    }\n    usageFromParentCommandsCommandHandler(parentCommands, commandHandler) {\n        const c = DEFAULT_MARKER.test(commandHandler.original)\n            ? commandHandler.original.replace(DEFAULT_MARKER, '').trim()\n            : commandHandler.original;\n        const pc = parentCommands.filter(c => {\n            return !DEFAULT_MARKER.test(c);\n        });\n        pc.push(c);\n        return `$0 ${pc.join(' ')}`;\n    }\n    applyMiddlewareAndGetResult(isDefaultCommand, commandHandler, innerArgv, currentContext, helpOnly, aliases, yargs) {\n        let positionalMap = {};\n        if (helpOnly)\n            return innerArgv;\n        if (!yargs.getInternalMethods().getHasOutput()) {\n            positionalMap = this.populatePositionals(commandHandler, innerArgv, currentContext, yargs);\n        }\n        const middlewares = this.globalMiddleware\n            .getMiddleware()\n            .slice(0)\n            .concat(commandHandler.middlewares);\n        innerArgv = applyMiddleware(innerArgv, yargs, middlewares, true);\n        if (!yargs.getInternalMethods().getHasOutput()) {\n            const validation = yargs\n                .getInternalMethods()\n                .runValidation(aliases, positionalMap, yargs.parsed.error, isDefaultCommand);\n            innerArgv = maybeAsyncResult(innerArgv, result => {\n                validation(result);\n                return result;\n            });\n        }\n        if (commandHandler.handler && !yargs.getInternalMethods().getHasOutput()) {\n            yargs.getInternalMethods().setHasOutput();\n            const populateDoubleDash = !!yargs.getOptions().configuration['populate--'];\n            yargs\n                .getInternalMethods()\n                .postProcess(innerArgv, populateDoubleDash, false, false);\n            innerArgv = applyMiddleware(innerArgv, yargs, middlewares, false);\n            innerArgv = maybeAsyncResult(innerArgv, result => {\n                const handlerResult = commandHandler.handler(result);\n                return isPromise(handlerResult)\n                    ? handlerResult.then(() => result)\n                    : result;\n            });\n            if (!isDefaultCommand) {\n                yargs.getInternalMethods().getUsageInstance().cacheHelpMessage();\n            }\n            if (isPromise(innerArgv) &&\n                !yargs.getInternalMethods().hasParseCallback()) {\n                innerArgv.catch(error => {\n                    try {\n                        yargs.getInternalMethods().getUsageInstance().fail(null, error);\n                    }\n                    catch (_err) {\n                    }\n                });\n            }\n        }\n        if (!isDefaultCommand) {\n            currentContext.commands.pop();\n            currentContext.fullCommands.pop();\n        }\n        return innerArgv;\n    }\n    populatePositionals(commandHandler, argv, context, yargs) {\n        argv._ = argv._.slice(context.commands.length);\n        const demanded = commandHandler.demanded.slice(0);\n        const optional = commandHandler.optional.slice(0);\n        const positionalMap = {};\n        this.validation.positionalCount(demanded.length, argv._.length);\n        while (demanded.length) {\n            const demand = demanded.shift();\n            this.populatePositional(demand, argv, positionalMap);\n        }\n        while (optional.length) {\n            const maybe = optional.shift();\n            this.populatePositional(maybe, argv, positionalMap);\n        }\n        argv._ = context.commands.concat(argv._.map(a => '' + a));\n        this.postProcessPositionals(argv, positionalMap, this.cmdToParseOptions(commandHandler.original), yargs);\n        return positionalMap;\n    }\n    populatePositional(positional, argv, positionalMap) {\n        const cmd = positional.cmd[0];\n        if (positional.variadic) {\n            positionalMap[cmd] = argv._.splice(0).map(String);\n        }\n        else {\n            if (argv._.length)\n                positionalMap[cmd] = [String(argv._.shift())];\n        }\n    }\n    cmdToParseOptions(cmdString) {\n        const parseOptions = {\n            array: [],\n            default: {},\n            alias: {},\n            demand: {},\n        };\n        const parsed = parseCommand(cmdString);\n        parsed.demanded.forEach(d => {\n            const [cmd, ...aliases] = d.cmd;\n            if (d.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n            parseOptions.demand[cmd] = true;\n        });\n        parsed.optional.forEach(o => {\n            const [cmd, ...aliases] = o.cmd;\n            if (o.variadic) {\n                parseOptions.array.push(cmd);\n                parseOptions.default[cmd] = [];\n            }\n            parseOptions.alias[cmd] = aliases;\n        });\n        return parseOptions;\n    }\n    postProcessPositionals(argv, positionalMap, parseOptions, yargs) {\n        const options = Object.assign({}, yargs.getOptions());\n        options.default = Object.assign(parseOptions.default, options.default);\n        for (const key of Object.keys(parseOptions.alias)) {\n            options.alias[key] = (options.alias[key] || []).concat(parseOptions.alias[key]);\n        }\n        options.array = options.array.concat(parseOptions.array);\n        options.config = {};\n        const unparsed = [];\n        Object.keys(positionalMap).forEach(key => {\n            positionalMap[key].map(value => {\n                if (options.configuration['unknown-options-as-args'])\n                    options.key[key] = true;\n                unparsed.push(`--${key}`);\n                unparsed.push(value);\n            });\n        });\n        if (!unparsed.length)\n            return;\n        const config = Object.assign({}, options.configuration, {\n            'populate--': false,\n        });\n        const parsed = this.shim.Parser.detailed(unparsed, Object.assign({}, options, {\n            configuration: config,\n        }));\n        if (parsed.error) {\n            yargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .fail(parsed.error.message, parsed.error);\n        }\n        else {\n            const positionalKeys = Object.keys(positionalMap);\n            Object.keys(positionalMap).forEach(key => {\n                positionalKeys.push(...parsed.aliases[key]);\n            });\n            const defaults = yargs.getOptions().default;\n            Object.keys(parsed.argv).forEach(key => {\n                if (positionalKeys.includes(key)) {\n                    if (!positionalMap[key])\n                        positionalMap[key] = parsed.argv[key];\n                    if (!Object.prototype.hasOwnProperty.call(defaults, key) &&\n                        Object.prototype.hasOwnProperty.call(argv, key) &&\n                        Object.prototype.hasOwnProperty.call(parsed.argv, key) &&\n                        (Array.isArray(argv[key]) || Array.isArray(parsed.argv[key]))) {\n                        argv[key] = [].concat(argv[key], parsed.argv[key]);\n                    }\n                    else {\n                        argv[key] = parsed.argv[key];\n                    }\n                }\n            });\n        }\n    }\n    runDefaultBuilderOn(yargs) {\n        if (!this.defaultCommand)\n            return;\n        if (this.shouldUpdateUsage(yargs)) {\n            const commandString = DEFAULT_MARKER.test(this.defaultCommand.original)\n                ? this.defaultCommand.original\n                : this.defaultCommand.original.replace(/^[^[\\]<>]*/, '$0 ');\n            yargs\n                .getInternalMethods()\n                .getUsageInstance()\n                .usage(commandString, this.defaultCommand.description);\n        }\n        const builder = this.defaultCommand.builder;\n        if (isCommandBuilderCallback(builder)) {\n            return builder(yargs, true);\n        }\n        else if (!isCommandBuilderDefinition(builder)) {\n            Object.keys(builder).forEach(key => {\n                yargs.option(key, builder[key]);\n            });\n        }\n        return undefined;\n    }\n    moduleName(obj) {\n        const mod = whichModule(obj);\n        if (!mod)\n            throw new Error(`No command name given for module: ${this.shim.inspect(obj)}`);\n        return this.commandFromFilename(mod.filename);\n    }\n    commandFromFilename(filename) {\n        return this.shim.path.basename(filename, this.shim.path.extname(filename));\n    }\n    extractDesc({ describe, description, desc }) {\n        for (const test of [describe, description, desc]) {\n            if (typeof test === 'string' || test === false)\n                return test;\n            assertNotStrictEqual(test, true, this.shim);\n        }\n        return false;\n    }\n    freeze() {\n        this.frozens.push({\n            handlers: this.handlers,\n            aliasMap: this.aliasMap,\n            defaultCommand: this.defaultCommand,\n        });\n    }\n    unfreeze() {\n        const frozen = this.frozens.pop();\n        assertNotStrictEqual(frozen, undefined, this.shim);\n        ({\n            handlers: this.handlers,\n            aliasMap: this.aliasMap,\n            defaultCommand: this.defaultCommand,\n        } = frozen);\n    }\n    reset() {\n        this.handlers = {};\n        this.aliasMap = {};\n        this.defaultCommand = undefined;\n        this.requireCache = new Set();\n        return this;\n    }\n}\nexport function command(usage, validation, globalMiddleware, shim) {\n    return new CommandInstance(usage, validation, globalMiddleware, shim);\n}\nexport function isCommandBuilderDefinition(builder) {\n    return (typeof builder === 'object' &&\n        !!builder.builder &&\n        typeof builder.handler === 'function');\n}\nfunction isCommandAndAliases(cmd) {\n    return cmd.every(c => typeof c === 'string');\n}\nexport function isCommandBuilderCallback(builder) {\n    return typeof builder === 'function';\n}\nfunction isCommandBuilderOptionDefinitions(builder) {\n    return typeof builder === 'object';\n}\nexport function isCommandHandlerDefinition(cmd) {\n    return typeof cmd === 'object' && !Array.isArray(cmd);\n}\n"]},"metadata":{},"sourceType":"module"}