{"ast":null,"code":"/*! https://mths.be/startswith v1.0.0 by @mathias */\n'use strict';\n\nvar callBound = require('es-abstract/helpers/callBound');\n\nvar RequireObjectCoercible = require('es-abstract/2019/RequireObjectCoercible');\n\nvar ToString = require('es-abstract/2019/ToString');\n\nvar IsRegExp = require('es-abstract/2019/IsRegExp');\n\nvar ToInteger = require('es-abstract/2019/ToInteger');\n\nvar StringCharCodeAt = callBound('String.prototype.charCodeAt');\nvar max = Math.max;\nvar min = Math.min; // https://tc39.es/ecma262/#sec-string.prototype.startswith\n\nmodule.exports = function startsWith(searchString) {\n  var O = RequireObjectCoercible(this);\n  var S = ToString(O);\n\n  if (IsRegExp(searchString)) {\n    throw TypeError('Argument to String.prototype.startsWith cannot be a RegExp');\n  }\n\n  var searchStr = ToString(searchString);\n  var pos = ToInteger(arguments.length > 1 ? arguments[1] : undefined);\n  var len = S.length;\n  var start = min(max(pos, 0), len);\n  var searchLength = searchStr.length; // Avoid the `indexOf` call if no match is possible\n\n  if (searchLength + start > len) return false;\n  var index = -1;\n\n  while (++index < searchLength) {\n    if (StringCharCodeAt(S, start + index) != StringCharCodeAt(searchStr, index)) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/string.prototype.startswith/implementation.js"],"names":["callBound","require","RequireObjectCoercible","ToString","IsRegExp","ToInteger","StringCharCodeAt","max","Math","min","module","exports","startsWith","searchString","O","S","TypeError","searchStr","pos","arguments","length","undefined","len","start","searchLength","index"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,+BAAD,CAAvB;;AACA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,yCAAD,CAApC;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,2BAAD,CAAtB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,2BAAD,CAAtB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,4BAAD,CAAvB;;AAEA,IAAIK,gBAAgB,GAAGN,SAAS,CAAC,6BAAD,CAAhC;AACA,IAAIO,GAAG,GAAGC,IAAI,CAACD,GAAf;AACA,IAAIE,GAAG,GAAGD,IAAI,CAACC,GAAf,C,CAEA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,YAApB,EAAkC;AAClD,MAAIC,CAAC,GAAGZ,sBAAsB,CAAC,IAAD,CAA9B;AACA,MAAIa,CAAC,GAAGZ,QAAQ,CAACW,CAAD,CAAhB;;AACA,MAAIV,QAAQ,CAACS,YAAD,CAAZ,EAA4B;AAC3B,UAAMG,SAAS,CAAC,4DAAD,CAAf;AACA;;AACD,MAAIC,SAAS,GAAGd,QAAQ,CAACU,YAAD,CAAxB;AAEA,MAAIK,GAAG,GAAGb,SAAS,CAACc,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAvC,CAAnB;AACA,MAAIC,GAAG,GAAGP,CAAC,CAACK,MAAZ;AACA,MAAIG,KAAK,GAAGd,GAAG,CAACF,GAAG,CAACW,GAAD,EAAM,CAAN,CAAJ,EAAcI,GAAd,CAAf;AACA,MAAIE,YAAY,GAAGP,SAAS,CAACG,MAA7B,CAXkD,CAalD;;AACA,MAAII,YAAY,GAAGD,KAAf,GAAuBD,GAA3B,EAAgC,OAAO,KAAP;AAEhC,MAAIG,KAAK,GAAG,CAAC,CAAb;;AACA,SAAO,EAAEA,KAAF,GAAUD,YAAjB,EAA+B;AAC9B,QAAIlB,gBAAgB,CAACS,CAAD,EAAIQ,KAAK,GAAGE,KAAZ,CAAhB,IAAsCnB,gBAAgB,CAACW,SAAD,EAAYQ,KAAZ,CAA1D,EAA8E;AAC7E,aAAO,KAAP;AACA;AACD;;AACD,SAAO,IAAP;AACA,CAvBD","sourcesContent":["/*! https://mths.be/startswith v1.0.0 by @mathias */\n\n'use strict';\n\nvar callBound = require('es-abstract/helpers/callBound');\nvar RequireObjectCoercible = require('es-abstract/2019/RequireObjectCoercible');\nvar ToString = require('es-abstract/2019/ToString');\nvar IsRegExp = require('es-abstract/2019/IsRegExp');\nvar ToInteger = require('es-abstract/2019/ToInteger');\n\nvar StringCharCodeAt = callBound('String.prototype.charCodeAt');\nvar max = Math.max;\nvar min = Math.min;\n\n// https://tc39.es/ecma262/#sec-string.prototype.startswith\nmodule.exports = function startsWith(searchString) {\n\tvar O = RequireObjectCoercible(this);\n\tvar S = ToString(O);\n\tif (IsRegExp(searchString)) {\n\t\tthrow TypeError('Argument to String.prototype.startsWith cannot be a RegExp');\n\t}\n\tvar searchStr = ToString(searchString);\n\n\tvar pos = ToInteger(arguments.length > 1 ? arguments[1] : undefined);\n\tvar len = S.length;\n\tvar start = min(max(pos, 0), len);\n\tvar searchLength = searchStr.length;\n\n\t// Avoid the `indexOf` call if no match is possible\n\tif (searchLength + start > len) return false;\n\n\tvar index = -1;\n\twhile (++index < searchLength) {\n\t\tif (StringCharCodeAt(S, start + index) != StringCharCodeAt(searchStr, index)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n"]},"metadata":{},"sourceType":"script"}