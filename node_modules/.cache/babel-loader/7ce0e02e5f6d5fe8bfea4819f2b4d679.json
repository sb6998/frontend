{"ast":null,"code":"const util = require('../../util');\n\nconst jsesc = require('jsesc');\n\nconst toJsFetch = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  let jsFetchCode = '';\n\n  if (request.data === true) {\n    request.data = '';\n  }\n\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString();\n    } // escape single quotes if there are any in there\n\n\n    if (request.data.indexOf(\"'\") > -1) {\n      request.data = jsesc(request.data);\n    }\n\n    try {\n      JSON.parse(request.data);\n\n      if (!request.headers) {\n        request.headers = {};\n      }\n\n      if (!request.headers['Content-Type']) {\n        request.headers['Content-Type'] = 'application/json; charset=UTF-8';\n      }\n\n      request.data = 'JSON.stringify(' + request.data + ')';\n    } catch {\n      request.data = '\\'' + request.data + '\\'';\n    }\n  }\n\n  jsFetchCode += 'fetch(\\'' + request.url + '\\'';\n\n  if (request.method !== 'get' || request.headers || request.cookies || request.auth || request.body) {\n    jsFetchCode += ', {\\n';\n\n    if (request.method !== 'get') {\n      jsFetchCode += '    method: \\'' + request.method.toUpperCase() + '\\'';\n    }\n\n    if (request.headers || request.cookies || request.auth) {\n      if (request.method !== 'get') {\n        jsFetchCode += ',\\n';\n      }\n\n      jsFetchCode += '    headers: {\\n';\n      const headerCount = Object.keys(request.headers || {}).length;\n      let i = 0;\n\n      for (const headerName in request.headers) {\n        jsFetchCode += '        \\'' + headerName + '\\': \\'' + request.headers[headerName] + '\\'';\n\n        if (i < headerCount - 1 || request.cookies || request.auth) {\n          jsFetchCode += ',\\n';\n        }\n\n        i++;\n      }\n\n      if (request.auth) {\n        const splitAuth = request.auth.split(':');\n        const user = splitAuth[0] || '';\n        const password = splitAuth[1] || '';\n        jsFetchCode += '        \\'Authorization\\': \\'Basic \\' + btoa(\\'' + user + ':' + password + '\\')';\n      }\n\n      if (request.cookies) {\n        const cookieString = util.serializeCookies(request.cookies);\n        jsFetchCode += '        \\'Cookie\\': \\'' + cookieString + '\\'';\n      }\n\n      jsFetchCode += '\\n    }';\n    }\n\n    if (request.data) {\n      jsFetchCode += ',\\n    body: ' + request.data;\n    }\n\n    jsFetchCode += '\\n}';\n  }\n\n  jsFetchCode += ');';\n  return jsFetchCode + '\\n';\n};\n\nmodule.exports = toJsFetch;","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/curlconverter/generators/javascript/fetch.js"],"names":["util","require","jsesc","toJsFetch","curlCommand","request","parseCurlCommand","jsFetchCode","data","toString","indexOf","JSON","parse","headers","url","method","cookies","auth","body","toUpperCase","headerCount","Object","keys","length","i","headerName","splitAuth","split","user","password","cookieString","serializeCookies","module","exports"],"mappings":"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","sourcesContent":["const util = require('../../util')\nconst jsesc = require('jsesc')\n\nconst toJsFetch = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n\n  let jsFetchCode = ''\n\n  if (request.data === true) {\n    request.data = ''\n  }\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString()\n    }\n    // escape single quotes if there are any in there\n    if (request.data.indexOf(\"'\") > -1) {\n      request.data = jsesc(request.data)\n    }\n\n    try {\n      JSON.parse(request.data)\n\n      if (!request.headers) {\n        request.headers = {}\n      }\n\n      if (!request.headers['Content-Type']) {\n        request.headers['Content-Type'] = 'application/json; charset=UTF-8'\n      }\n\n      request.data = 'JSON.stringify(' + request.data + ')'\n    } catch {\n      request.data = '\\'' + request.data + '\\''\n    }\n  }\n\n  jsFetchCode += 'fetch(\\'' + request.url + '\\''\n\n  if (request.method !== 'get' || request.headers || request.cookies || request.auth || request.body) {\n    jsFetchCode += ', {\\n'\n\n    if (request.method !== 'get') {\n      jsFetchCode += '    method: \\'' + request.method.toUpperCase() + '\\''\n    }\n\n    if (request.headers || request.cookies || request.auth) {\n      if (request.method !== 'get') {\n        jsFetchCode += ',\\n'\n      }\n      jsFetchCode += '    headers: {\\n'\n      const headerCount = Object.keys(request.headers || {}).length\n      let i = 0\n      for (const headerName in request.headers) {\n        jsFetchCode += '        \\'' + headerName + '\\': \\'' + request.headers[headerName] + '\\''\n        if (i < headerCount - 1 || request.cookies || request.auth) {\n          jsFetchCode += ',\\n'\n        }\n        i++\n      }\n      if (request.auth) {\n        const splitAuth = request.auth.split(':')\n        const user = splitAuth[0] || ''\n        const password = splitAuth[1] || ''\n        jsFetchCode += '        \\'Authorization\\': \\'Basic \\' + btoa(\\'' + user + ':' + password + '\\')'\n      }\n      if (request.cookies) {\n        const cookieString = util.serializeCookies(request.cookies)\n        jsFetchCode += '        \\'Cookie\\': \\'' + cookieString + '\\''\n      }\n\n      jsFetchCode += '\\n    }'\n    }\n\n    if (request.data) {\n      jsFetchCode += ',\\n    body: ' + request.data\n    }\n\n    jsFetchCode += '\\n}'\n  }\n\n  jsFetchCode += ');'\n\n  return jsFetchCode + '\\n'\n}\n\nmodule.exports = toJsFetch\n"]},"metadata":{},"sourceType":"script"}