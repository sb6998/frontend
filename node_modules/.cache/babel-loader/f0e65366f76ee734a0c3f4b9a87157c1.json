{"ast":null,"code":"const util = require('../../util');\n\nconst jsesc = require('jsesc');\n\nconst toNodeRequest = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand);\n  let nodeRequestCode = 'var request = require(\\'request\\');\\n\\n';\n\n  if (request.headers || request.cookies) {\n    nodeRequestCode += 'var headers = {\\n';\n    const headerCount = Object.keys(request.headers).length;\n    let i = 0;\n\n    for (const headerName in request.headers) {\n      nodeRequestCode += '    \\'' + headerName + '\\': \\'' + request.headers[headerName] + '\\'';\n\n      if (i < headerCount - 1 || request.cookies) {\n        nodeRequestCode += ',\\n';\n      } else {\n        nodeRequestCode += '\\n';\n      }\n\n      i++;\n    }\n\n    if (request.cookies) {\n      const cookieString = util.serializeCookies(request.cookies);\n      nodeRequestCode += '    \\'Cookie\\': \\'' + cookieString + '\\'\\n';\n    }\n\n    nodeRequestCode += '};\\n\\n';\n  }\n\n  if (request.data === true) {\n    request.data = '';\n  }\n\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString();\n    } // escape single quotes if there are any in there\n\n\n    if (request.data.indexOf(\"'\") > -1) {\n      request.data = jsesc(request.data);\n    }\n\n    nodeRequestCode += 'var dataString = \\'' + request.data + '\\';\\n\\n';\n  }\n\n  nodeRequestCode += 'var options = {\\n';\n  nodeRequestCode += '    url: \\'' + request.url + '\\'';\n\n  if (request.method !== 'get') {\n    nodeRequestCode += ',\\n    method: \\'' + request.method.toUpperCase() + '\\'';\n  }\n\n  if (request.headers || request.cookies) {\n    nodeRequestCode += ',\\n';\n    nodeRequestCode += '    headers: headers';\n  }\n\n  if (request.data) {\n    nodeRequestCode += ',\\n    body: dataString';\n  }\n\n  if (request.auth) {\n    nodeRequestCode += ',\\n';\n    const splitAuth = request.auth.split(':');\n    const user = splitAuth[0] || '';\n    const password = splitAuth[1] || '';\n    nodeRequestCode += '    auth: {\\n';\n    nodeRequestCode += \"        'user': '\" + user + \"',\\n\";\n    nodeRequestCode += \"        'pass': '\" + password + \"'\\n\";\n    nodeRequestCode += '    }\\n';\n  } else {\n    nodeRequestCode += '\\n';\n  }\n\n  nodeRequestCode += '};\\n\\n';\n  nodeRequestCode += 'function callback(error, response, body) {\\n';\n  nodeRequestCode += '    if (!error && response.statusCode == 200) {\\n';\n  nodeRequestCode += '        console.log(body);\\n';\n  nodeRequestCode += '    }\\n';\n  nodeRequestCode += '}\\n\\n';\n  nodeRequestCode += 'request(options, callback);';\n  return nodeRequestCode + '\\n';\n};\n\nmodule.exports = toNodeRequest;","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/curlconverter/generators/javascript/node-request.js"],"names":["util","require","jsesc","toNodeRequest","curlCommand","request","parseCurlCommand","nodeRequestCode","headers","cookies","headerCount","Object","keys","length","i","headerName","cookieString","serializeCookies","data","toString","indexOf","url","method","toUpperCase","auth","splitAuth","split","user","password","module","exports"],"mappings":"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","sourcesContent":["const util = require('../../util')\nconst jsesc = require('jsesc')\n\nconst toNodeRequest = curlCommand => {\n  const request = util.parseCurlCommand(curlCommand)\n  let nodeRequestCode = 'var request = require(\\'request\\');\\n\\n'\n  if (request.headers || request.cookies) {\n    nodeRequestCode += 'var headers = {\\n'\n    const headerCount = Object.keys(request.headers).length\n    let i = 0\n    for (const headerName in request.headers) {\n      nodeRequestCode += '    \\'' + headerName + '\\': \\'' + request.headers[headerName] + '\\''\n      if (i < headerCount - 1 || request.cookies) {\n        nodeRequestCode += ',\\n'\n      } else {\n        nodeRequestCode += '\\n'\n      }\n      i++\n    }\n    if (request.cookies) {\n      const cookieString = util.serializeCookies(request.cookies)\n      nodeRequestCode += '    \\'Cookie\\': \\'' + cookieString + '\\'\\n'\n    }\n    nodeRequestCode += '};\\n\\n'\n  }\n\n  if (request.data === true) {\n    request.data = ''\n  }\n  if (request.data) {\n    if (typeof request.data === 'number') {\n      request.data = request.data.toString()\n    }\n    // escape single quotes if there are any in there\n    if (request.data.indexOf(\"'\") > -1) {\n      request.data = jsesc(request.data)\n    }\n    nodeRequestCode += 'var dataString = \\'' + request.data + '\\';\\n\\n'\n  }\n\n  nodeRequestCode += 'var options = {\\n'\n  nodeRequestCode += '    url: \\'' + request.url + '\\''\n  if (request.method !== 'get') {\n    nodeRequestCode += ',\\n    method: \\'' + request.method.toUpperCase() + '\\''\n  }\n\n  if (request.headers || request.cookies) {\n    nodeRequestCode += ',\\n'\n    nodeRequestCode += '    headers: headers'\n  }\n  if (request.data) {\n    nodeRequestCode += ',\\n    body: dataString'\n  }\n\n  if (request.auth) {\n    nodeRequestCode += ',\\n'\n    const splitAuth = request.auth.split(':')\n    const user = splitAuth[0] || ''\n    const password = splitAuth[1] || ''\n    nodeRequestCode += '    auth: {\\n'\n    nodeRequestCode += \"        'user': '\" + user + \"',\\n\"\n    nodeRequestCode += \"        'pass': '\" + password + \"'\\n\"\n    nodeRequestCode += '    }\\n'\n  } else {\n    nodeRequestCode += '\\n'\n  }\n  nodeRequestCode += '};\\n\\n'\n\n  nodeRequestCode += 'function callback(error, response, body) {\\n'\n  nodeRequestCode += '    if (!error && response.statusCode == 200) {\\n'\n  nodeRequestCode += '        console.log(body);\\n'\n  nodeRequestCode += '    }\\n'\n  nodeRequestCode += '}\\n\\n'\n  nodeRequestCode += 'request(options, callback);'\n\n  return nodeRequestCode + '\\n'\n}\n\nmodule.exports = toNodeRequest\n"]},"metadata":{},"sourceType":"script"}