{"ast":null,"code":"import { argsert } from './argsert.js';\nimport { isPromise } from './utils/is-promise.js';\nexport class GlobalMiddleware {\n  constructor(yargs) {\n    this.globalMiddleware = [];\n    this.frozens = [];\n    this.yargs = yargs;\n  }\n\n  addMiddleware(callback, applyBeforeValidation) {\n    let global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let mutates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    argsert('<array|function> [boolean] [boolean] [boolean]', [callback, applyBeforeValidation, global], arguments.length);\n\n    if (Array.isArray(callback)) {\n      for (let i = 0; i < callback.length; i++) {\n        if (typeof callback[i] !== 'function') {\n          throw Error('middleware must be a function');\n        }\n\n        const m = callback[i];\n        m.applyBeforeValidation = applyBeforeValidation;\n        m.global = global;\n      }\n\n      Array.prototype.push.apply(this.globalMiddleware, callback);\n    } else if (typeof callback === 'function') {\n      const m = callback;\n      m.applyBeforeValidation = applyBeforeValidation;\n      m.global = global;\n      m.mutates = mutates;\n      this.globalMiddleware.push(callback);\n    }\n\n    return this.yargs;\n  }\n\n  addCoerceMiddleware(callback, option) {\n    const aliases = this.yargs.getAliases();\n    this.globalMiddleware = this.globalMiddleware.filter(m => {\n      const toCheck = [...(aliases[option] || []), option];\n      if (!m.option) return true;else return !toCheck.includes(m.option);\n    });\n    callback.option = option;\n    return this.addMiddleware(callback, true, true, true);\n  }\n\n  getMiddleware() {\n    return this.globalMiddleware;\n  }\n\n  freeze() {\n    this.frozens.push([...this.globalMiddleware]);\n  }\n\n  unfreeze() {\n    const frozen = this.frozens.pop();\n    if (frozen !== undefined) this.globalMiddleware = frozen;\n  }\n\n  reset() {\n    this.globalMiddleware = this.globalMiddleware.filter(m => m.global);\n  }\n\n}\nexport function commandMiddlewareFactory(commandMiddleware) {\n  if (!commandMiddleware) return [];\n  return commandMiddleware.map(middleware => {\n    middleware.applyBeforeValidation = false;\n    return middleware;\n  });\n}\nexport function applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n  return middlewares.reduce((acc, middleware) => {\n    if (middleware.applyBeforeValidation !== beforeValidation) {\n      return acc;\n    }\n\n    if (middleware.mutates) {\n      if (middleware.applied) return acc;\n      middleware.applied = true;\n    }\n\n    if (isPromise(acc)) {\n      return acc.then(initialObj => Promise.all([initialObj, middleware(initialObj, yargs)])).then(_ref => {\n        let [initialObj, middlewareObj] = _ref;\n        return Object.assign(initialObj, middlewareObj);\n      });\n    } else {\n      const result = middleware(acc, yargs);\n      return isPromise(result) ? result.then(middlewareObj => Object.assign(acc, middlewareObj)) : Object.assign(acc, result);\n    }\n  }, argv);\n}","map":{"version":3,"sources":["/home/saurabh/Desktop/saarthi/frontend/node_modules/@curlconverter/yargs/build/lib/middleware.js"],"names":["argsert","isPromise","GlobalMiddleware","constructor","yargs","globalMiddleware","frozens","addMiddleware","callback","applyBeforeValidation","global","mutates","arguments","length","Array","isArray","i","Error","m","prototype","push","apply","addCoerceMiddleware","option","aliases","getAliases","filter","toCheck","includes","getMiddleware","freeze","unfreeze","frozen","pop","undefined","reset","commandMiddlewareFactory","commandMiddleware","map","middleware","applyMiddleware","argv","middlewares","beforeValidation","reduce","acc","applied","then","initialObj","Promise","all","middlewareObj","Object","assign","result"],"mappings":"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","sourcesContent":["import { argsert } from './argsert.js';\nimport { isPromise } from './utils/is-promise.js';\nexport class GlobalMiddleware {\n    constructor(yargs) {\n        this.globalMiddleware = [];\n        this.frozens = [];\n        this.yargs = yargs;\n    }\n    addMiddleware(callback, applyBeforeValidation, global = true, mutates = false) {\n        argsert('<array|function> [boolean] [boolean] [boolean]', [callback, applyBeforeValidation, global], arguments.length);\n        if (Array.isArray(callback)) {\n            for (let i = 0; i < callback.length; i++) {\n                if (typeof callback[i] !== 'function') {\n                    throw Error('middleware must be a function');\n                }\n                const m = callback[i];\n                m.applyBeforeValidation = applyBeforeValidation;\n                m.global = global;\n            }\n            Array.prototype.push.apply(this.globalMiddleware, callback);\n        }\n        else if (typeof callback === 'function') {\n            const m = callback;\n            m.applyBeforeValidation = applyBeforeValidation;\n            m.global = global;\n            m.mutates = mutates;\n            this.globalMiddleware.push(callback);\n        }\n        return this.yargs;\n    }\n    addCoerceMiddleware(callback, option) {\n        const aliases = this.yargs.getAliases();\n        this.globalMiddleware = this.globalMiddleware.filter(m => {\n            const toCheck = [...(aliases[option] || []), option];\n            if (!m.option)\n                return true;\n            else\n                return !toCheck.includes(m.option);\n        });\n        callback.option = option;\n        return this.addMiddleware(callback, true, true, true);\n    }\n    getMiddleware() {\n        return this.globalMiddleware;\n    }\n    freeze() {\n        this.frozens.push([...this.globalMiddleware]);\n    }\n    unfreeze() {\n        const frozen = this.frozens.pop();\n        if (frozen !== undefined)\n            this.globalMiddleware = frozen;\n    }\n    reset() {\n        this.globalMiddleware = this.globalMiddleware.filter(m => m.global);\n    }\n}\nexport function commandMiddlewareFactory(commandMiddleware) {\n    if (!commandMiddleware)\n        return [];\n    return commandMiddleware.map(middleware => {\n        middleware.applyBeforeValidation = false;\n        return middleware;\n    });\n}\nexport function applyMiddleware(argv, yargs, middlewares, beforeValidation) {\n    return middlewares.reduce((acc, middleware) => {\n        if (middleware.applyBeforeValidation !== beforeValidation) {\n            return acc;\n        }\n        if (middleware.mutates) {\n            if (middleware.applied)\n                return acc;\n            middleware.applied = true;\n        }\n        if (isPromise(acc)) {\n            return acc\n                .then(initialObj => Promise.all([\n                initialObj,\n                middleware(initialObj, yargs),\n            ]))\n                .then(([initialObj, middlewareObj]) => Object.assign(initialObj, middlewareObj));\n        }\n        else {\n            const result = middleware(acc, yargs);\n            return isPromise(result)\n                ? result.then(middlewareObj => Object.assign(acc, middlewareObj))\n                : Object.assign(acc, result);\n        }\n    }, argv);\n}\n"]},"metadata":{},"sourceType":"module"}